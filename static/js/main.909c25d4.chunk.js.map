{"version":3,"sources":["redux/selectors/selectCurrentUser.ts","components/Card.tsx","components/Spinner.tsx","redux/constants/constants.ts","redux/actions/cartdSettingActions/setSelectedCard.ts","redux/selectors/selectInitialCards.ts","components/Main.tsx","redux/actions/popupsActions/setIsEditAvatarPopupOpen.ts","redux/actions/popupsActions/setIsEditProfilePopupOpen.ts","redux/actions/popupsActions/setIsAddPlacePopupOpen.ts","components/Footer.tsx","components/ImagePopup.tsx","components/PopupWithForm.tsx","redux/selectors/selectPopups.ts","redux/selectors/selectCardSettings.ts","redux/selectors/selectorLang.ts","languages/language.ts","components/EditProfilePopup.tsx","components/EditAvatarPopup.tsx","components/AddPlacePopup.tsx","components/PopupWithSubmit.tsx","components/Login.tsx","components/Register.tsx","utils/authTS.ts","components/SuccessOrFailPopup.tsx","components/SuccessPopup.tsx","components/FailPopup.tsx","redux/reducers/language.ts","components/Header.tsx","redux/actions/popupsActions/setFailPopupOpen.ts","redux/actions/popupsActions/setPopupWithSubmitOpen.ts","redux/actions/currentUserAndEmail/setCurrentUser.ts","redux/actions/currentUserAndEmail/setCurrentEmail.ts","redux/actions/cartdSettingActions/setLoggedIn.ts","redux/actions/cartdSettingActions/setLoadingBtn.ts","redux/actions/initialCardsActions/setIsLoading.ts","utils/apiTS.ts","components/App.tsx","redux/actions/popupsActions/closeAllPopupsState.ts","redux/actions/initialCardsActions/setInitialCards.ts","redux/actions/initialCardsActions/addCard.ts","redux/actions/initialCardsActions/deleteCard.ts","redux/actions/initialCardsActions/likeCard.ts","redux/actions/cartdSettingActions/setCardToDelete.ts","redux/actions/popupsActions/setSuccessPopupOpen.ts","reportWebVitals.js","redux/reducers/initialCard.ts","redux/reducers/currentUser.ts","redux/reducers/popups.ts","redux/reducers/cardSettings.ts","redux/reducers/index.ts","redux/store.ts","index.tsx"],"names":["selectCurrentUser","state","currentUser","Card","card","onCardClick","onCardLike","onCardDelete","user","useSelector","isOwn","owner","_id","cardDeleteButtonClassName","isLiked","likes","some","i","cardLikeButtonClassName","className","type","onClick","src","link","alt","name","length","Spinner","style","height","SET_CARDS","ADD_CARD","DELETE_CARD","LIKE_CARD","SET_USER","SET_EDIT_PROFILE_POPUP_OPEN","SET_ADD_PLACE_POPUP_OPEN","SET_EDIT_AVATAR_POPUP_OPEN","SET_POPUP_WITH_SUBMIT_OPEN","CLOSE_ALL_POPUPS","SET_LOADING","SET_SELECTED_CARD","SET_CARD_TO_DELETE","SET_LOADING_BTN","SET_LOGGED_IN","SET_CURRENT_EMAIL","SET_SUCCESS_POPUP_OPEN","SET_FAIL_POPUP_OPEN","setSelectedCard","value","payload","selectInitialCards","initialCards","Main","cards","isLoading","dispatch","useDispatch","handleCardClick","avatar","about","map","Footer","currentYear","moment","format","ImagePopup","onClose","PopupWithForm","props","params","isOpen","onSubmit","action","formName","title","children","isValid","loadingBtn","buttonLoadingText","buttonText","selectPopups","popups","selectCardSettings","cardSettings","selectLang","langReducer","language","ru","fi","EditProfilePopup","selectedLang","editProfilePopupSchema","yup","shape","userName","min","required","description","useForm","resolver","yupResolver","mode","register","errors","formState","handleSubmit","setValue","isEditProfilePopupOpen","useEffect","data","onUpdateUser","editProfilePopup","id","placeholder","placeholderName","message","placeholderLink","EditAvatarPopup","avatarPopupSchema","url","reset","isEditAvatarPopupOpen","onUpdateAvatar","editAvatarPopup","AddPlacePopup","addPlaceSchema","isAddPlacePopupOpen","onAddPlace","addPlacePopup","PopupWithSubmit","cardToDelete","isPopupWithSubmitOpen","e","preventDefault","Login","handleAuthorize","schema","Email","email","password","max","useState","setEmail","setPassword","noValidate","login","onChange","target","Register","handleRegister","text","to","textBtn","BASE_URL","handleResponse","res","ok","json","Promise","reject","status","SuccessOrFailPopup","SuccessPopup","FailPopup","SET_LANG","initialState","Header","signOut","currentEmail","langHandler","setLang","href","exact","path","header","singOut","singIn","singUp","setFailPopupOpen","setPopupWithSubmitOpen","setCurrentUser","setCurrentEmail","setLoggedIn","setLoadingBtn","setIsLoading","apiTS","baseUrl","headers","URL","token","this","authorization","fetch","then","_handleResponse","method","body","JSON","stringify","item","App","selectedCard","loggedIn","successPopupOpen","failPopupOpen","history","useHistory","closeAllPopups","getInitialCard","getInitialCards","getUserInfoFromServer","all","cardData","userData","setInitialCards","catch","error","console","log","finally","localStorage","getItem","jwt","response","push","setUserInfoFromServer","err","changeAvatar","addCardToServer","deleteCardFromServer","filteredCards","filter","deleteCard","removeItem","changeLikeCardStatus","newCard","likedCards","c","likeCard","setItem","auth","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","cohort","rootReducer","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","basename","process","document","getElementById"],"mappings":"qLAEaA,EAAoB,SAACC,GAAD,OAC7BA,EAAMC,a,OCiDKC,EAxCS,SAAC,GAAmD,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,YAAaC,EAA8B,EAA9BA,WAAYC,EAAkB,EAAlBA,aAE9CC,EAAQC,YAAYT,GAApBQ,KAEDE,EAAQN,EAAKO,MAAMC,MAAQJ,EAAKI,IAEhCC,EAAyB,iCACAH,EAAuC,GAA/B,8BAGjCI,EAAUV,EAAKW,MAAMC,MAAK,SAAAC,GAAC,OAAIA,EAAEL,MAAQJ,EAAKI,OAE9CM,EAAuB,wBAAoBJ,EAAU,uBAAyB,IAUpF,OACI,qBAAIK,UAAU,UAAd,UACI,wBAAQC,KAAK,SAASD,UAAWN,EACzBQ,QAPhB,WACId,EAAaH,MAOT,qBAAKkB,IAAKlB,EAAKmB,KAAMC,IAAKpB,EAAKqB,KAAMJ,QAAS,kBAAMhB,EAAYD,IAC3De,UAAU,mBACf,sBAAKA,UAAU,iBAAf,UACI,oBAAIA,UAAU,iBAAd,SAAgCf,EAAKqB,OACrC,sBAAKN,UAAU,sBAAf,UACI,wBAAQC,KAAK,SAASD,UAAWD,EACzBG,QAlBxB,WACIf,EAAWF,MAkBC,sBAAMe,UAAU,wBAAhB,SAAyCf,EAAKW,MAAMW,mBC3C3DC,EAAa,WAExB,OAAO,qBAAKC,MAAO,CAACC,OAAQ,QAArB,SACL,qBAAKV,UAAU,eCLNW,EAAY,YACZC,EAAW,WACXC,EAAc,cACdC,EAAY,YACZC,EAAW,WACXC,EAA8B,8BAC9BC,EAA2B,2BAC3BC,EAA6B,6BAC7BC,EAA6B,6BAC7BC,EAAmB,mBACnBC,EAAc,cACdC,EAAoB,oBACpBC,EAAqB,qBACrBC,EAAkB,kBAClBC,EAAgB,gBAChBC,EAAoB,oBACpBC,EAAyB,yBACzBC,EAAsB,sBCRtBC,EAAkB,SAACC,GAAD,MAA4C,CACvE7B,KAAMqB,EACNS,QAASD,ICTAE,EAAqB,SAAClD,GAAD,OAC9BA,EAAMmD,cC0EKC,EA3DS,SAAC,GAAgC,IAA/B/C,EAA8B,EAA9BA,WAAYC,EAAkB,EAAlBA,aAElC,EAA2BE,YAAY0C,GAAhCG,EAAP,EAAOA,MAAOC,EAAd,EAAcA,UAEP/C,EAAQC,YAAYT,GAApBQ,KAEDgD,EAAWC,cAcjB,SAASC,EAAgBtD,GACrBoD,EAASR,EAAgB5C,IAG7B,OACI,sBAAMe,UAAU,OAAhB,SACKoC,EAAa,cAAC,EAAD,IACT,qCACG,0BAASpC,UAAU,UAAnB,UACI,sBAAKA,UAAU,mBAAf,UACI,sBAAKE,QAtB7B,WACImC,ECnBgF,CACpFpC,KAAMiB,EACNa,SDiBsC,KAqBuB/B,UAAU,yBAA/C,UACI,qBAAKG,IAAKd,EAAKmD,OAAQnC,IAAI,sEACtBL,UAAU,mBACf,wBAAQA,UAAU,0BAEtB,sBAAKA,UAAU,gBAAf,UACI,oBAAIA,UAAU,gBAAd,SAA+BX,EAAKiB,OACpC,wBAAQJ,QAzBpC,WACImC,EEvBkF,CACtFpC,KAAMe,EACNe,SFqBuC,KAwB8B9B,KAAK,SAASD,UAAU,oBACjE,mBAAGA,UAAU,eAAb,SAA6BX,EAAKoD,cAG1C,wBAAQvC,QAzB5B,WACImC,EG3B4E,CAChFpC,KAAMgB,EACNc,SHyBoC,KAwBsB9B,KAAK,SAASD,UAAU,2BAGlE,yBAASA,UAAU,WAAnB,SACI,oBAAIA,UAAU,iBAAd,SACKmC,EAAMO,KAAI,SAACzD,GAAD,OAAU,cAAC,EAAD,CACFA,KAAMA,EACrBC,YAAaqD,EACbpD,WAAYA,EACZC,aAAcA,GAHTH,EAAKQ,kB,iBInD3BkD,EAXI,WAEf,IAAMC,EAAcC,MAASC,OAAO,QAEpC,OACI,wBAAQ9C,UAAU,SAAlB,SACI,oBAAGA,UAAU,oBAAb,kBAAoC4C,EAApC,sBCYGG,EAbqB,SAAC,GAAqB,IAApB9D,EAAmB,EAAnBA,KAAM+D,EAAa,EAAbA,QAExC,OACI,qBAAKhD,UAAS,iCAA4Bf,GAAQ,gBAAlD,SACI,sBAAKe,UAAU,+CAAf,UACI,wBAAQE,QAAS8C,EAAS/C,KAAK,SAASD,UAAU,uDAClD,qBAAKG,IAAG,OAAElB,QAAF,IAAEA,OAAF,EAAEA,EAAMmB,KAAMC,IAAG,OAAEpB,QAAF,IAAEA,OAAF,EAAEA,EAAMqB,KAAMN,UAAU,eACjD,oBAAIA,UAAU,eAAd,gBAA8Bf,QAA9B,IAA8BA,OAA9B,EAA8BA,EAAMqB,a,OCoBrC2C,EAlBmC,SAACC,GAG/C,OACI,qBAAKlD,UAAS,sBAAiBkD,EAAMC,OAAO7C,KAA9B,YAAsC4C,EAAME,QAAU,gBAApE,SACI,sBAAKpD,UAAU,mBAAf,UACI,wBAAQE,QAASgD,EAAMF,QAAS/C,KAAK,SAASD,UAAU,wBACxD,uBAAMqD,SAAUH,EAAMG,SAAUC,OAAO,IAAItD,UAAU,OAAOM,KAAM4C,EAAMC,OAAOI,SAA/E,UACI,oBAAIvD,UAAU,gBAAd,SAA+BkD,EAAMC,OAAOK,QAC3CN,EAAMO,SACP,wBAAQxD,KAAK,SACLD,UAAS,wBAAmBkD,EAAMQ,SAAW,yBADrD,SACiFR,EAAMS,WAAaT,EAAMC,OAAOS,kBAAoBV,EAAMC,OAAOU,sBCzBzJC,EAAe,SAAChF,GAAD,OACxBA,EAAMiF,QCDGC,EAAqB,SAAClF,GAAD,OAC9BA,EAAMmF,c,wBCDGC,EAAa,SAACpF,GAAD,OACtBA,EAAMqF,aC0CGC,EAAsB,CAC/BC,GAAI,CACA,OAAU,CACN,QAAW,iCACX,OAAU,iCACV,OAAU,sEAEd,cAAiB,CACb,MAAS,gEACT,WAAc,6CACd,kBAAqB,gDACrB,gBAAmB,mDACnB,gBAAmB,sGAEvB,gBAAmB,CACf,MAAS,wFACT,WAAc,yDACd,kBAAqB,4DACrB,gBAAmB,sGAEvB,iBAAoB,CAChB,MAAS,4HACT,WAAc,yDACd,kBAAqB,4DACrB,gBAAmB,gEACnB,gBAAmB,4GAEvB,MAAS,CACL,MAAS,2BACT,WAAc,iCACd,YAAe,wCAEnB,SAAY,CACR,MAAS,qEACT,WAAc,+GACd,YAAe,uCACf,KAAQ,uHACR,QAAW,mCAGnBC,GAAI,CACA,OAAU,CACN,QAAW,gBACX,OAAU,aACV,OAAU,yBAEd,cAAiB,CACb,MAAS,cACT,WAAc,QACd,kBAAqB,WACrB,gBAAmB,OACnB,gBAAmB,UAEvB,gBAAmB,CACf,MAAS,uBACT,WAAc,QACd,kBAAqB,WACrB,gBAAmB,UAEvB,iBAAoB,CAChB,MAAS,mBACT,WAAc,QACd,kBAAqB,WACrB,gBAAmB,kBACnB,gBAAmB,sBAEvB,MAAS,CACL,MAAS,aACT,WAAc,MACd,YAAe,YAEnB,SAAY,CACR,MAAS,wBACT,WAAc,WACd,YAAe,WACf,KAAQ,yBACR,QAAW,gBC5BRC,EAtEsC,SAACrB,GAAW,IAAD,IAErDsB,EAAgBlF,YAAY4E,GAA5BM,aAEDC,EAAyBC,MAAaC,MAAM,CAC9CC,SAAUF,MACLG,IAAI,EADC,UACsB,OAAjBL,EAAwB,0FAAsB,GADnD,yBAEa,OAAjBA,EAAwB,kCAAwB,KACjDM,SAHK,UAGwB,OAAjBN,EAAwB,0FAAsB,GAHrD,yBAIa,OAAjBA,EAAwB,uBAAsB,KACpDO,YAAaL,MACRG,IAAI,EADI,UACmB,OAAjBL,EAAwB,0FAAsB,GADhD,yBAEU,OAAjBA,EAAwB,kCAAwB,KACjDM,SAHQ,UAGqB,OAAjBN,EAAwB,0FAAsB,GAHlD,yBAIU,OAAjBA,EAAwB,uBAAsB,OAGxD,EAAgEQ,YAAqB,CACjFC,SAAUC,YAAYT,GACtBU,KAAM,aAFHC,EAAP,EAAOA,SAAsBC,EAA7B,EAAiBC,UAAYD,OAASE,EAAtC,EAAsCA,aAAcC,EAApD,EAAoDA,SAK7CnG,EAAQC,YAAYT,GAApBQ,KACAoG,EAA0BnG,YAAYwE,GAAtC2B,uBACA9B,EAAcrE,YAAY0E,GAA1BL,WAEP+B,qBAAU,WACNF,EAAS,WAAYnG,EAAKiB,MAC1BkF,EAAS,cAAenG,EAAKoD,SAC9B,CAACpD,EAAMmG,EAAUC,IAGpB,IAAMpC,EAAWkC,GAAa,SAAAI,GAC1BzC,EAAM0C,aAAa,CACfhB,SAAUe,EAAKf,SACfG,YAAaY,EAAKZ,iBAI1B,OACI,eAAC,EAAD,CAAe3B,OAAQqC,EACRtC,OAAQ,CACJ7C,KAAM,YACNkD,MAAM,GAAD,OAAKY,EAASI,GAAcqB,iBAAiBrC,OAClDK,WAAW,GAAD,OAAKO,EAASI,GAAcqB,iBAAiBhC,YACvDD,kBAAkB,GAAD,OAAKQ,EAASI,GAAcqB,iBAAiBjC,mBAC9DL,SAAU,gBAEdP,QAASE,EAAMF,QACfW,WAAYA,EACZD,SAAS,EACTL,SAAUA,EAXzB,UAcI,+CAAOrD,UAAU,cAAcC,KAAK,OAAO6F,GAAG,QACnCV,EAAS,WAAY,CAACN,UAAU,KAD3C,IAEOiB,YAAa3B,EAASI,GAAcqB,iBAAiBG,mBAE5D,mBAAGhG,UAAU,qCAAb,mBAAmDqF,EAAOT,gBAA1D,aAAmD,EAAiBqB,UAEpE,+CAAOhG,KAAK,OAAOD,UAAU,cAAc8F,GAAG,eACnCV,EAAS,cAAe,CAACN,UAAU,KAD9C,IAEOiB,YAAa3B,EAASI,GAAcqB,iBAAiBK,mBAE5D,mBAAGlG,UAAU,oCAAb,mBAAkDqF,EAAON,mBAAzD,aAAkD,EAAoBkB,cCdnEE,EApD+B,SAACjD,GAAW,IAAD,EAC9CsB,EAAgBlF,YAAY4E,GAA5BM,aAED4B,EAAoB1B,MAAaC,MAAM,CACzCnC,OAAQkC,MACH2B,IADG,UACqB,OAAjB7B,EAAwB,8GAA2B,GADvD,yBAEe,OAAjBA,EAAwB,8BAA0B,KACnDM,SAHG,UAG0B,OAAjBN,EAAwB,iDAAgB,GAHjD,yBAIe,OAAjBA,EAAwB,uBAAsB,OAGxD,EAAsEQ,YAAqB,CACvFC,SAAUC,YAAYkB,GACtBjB,KAAM,aAFHC,EAAP,EAAOA,SAAP,IAAiBE,UAAYD,EAA7B,EAA6BA,OAAQ3B,EAArC,EAAqCA,QAAU6B,EAA/C,EAA+CA,aAAce,EAA7D,EAA6DA,MAKtDC,EAAyBjH,YAAYwE,GAArCyC,sBACA5C,EAAcrE,YAAY0E,GAA1BL,WAEP+B,qBAAU,WACNY,MACD,CAACA,EAAOC,IAEX,IAAMlD,EAAWkC,GAAa,SAAAI,GAC1BzC,EAAMsD,eAAe,CACjBhE,OAAQmD,EAAKnD,YAIrB,OACI,eAAC,EAAD,CAAeY,OAAQmD,EACRvD,QAASE,EAAMF,QACfW,WAAYA,EACZN,SAAUA,EACVK,QAASA,EACTP,OAAQ,CACJ7C,KAAM,cACNkD,MAAM,GAAD,OAAKY,EAASI,GAAciC,gBAAgBjD,OACjDK,WAAW,GAAD,OAAKO,EAASI,GAAciC,gBAAgB5C,YACtDD,kBAAkB,GAAD,OAAKQ,EAASI,GAAciC,gBAAgB7C,mBAC7DL,SAAU,iBAV7B,UAaI,+CAAOtD,KAAK,MAAMD,UAAU,cAAc8F,GAAG,UAClCV,EAAS,SAAU,CAACN,UAAU,KADzC,IAEOiB,YAAa3B,EAASI,GAAciC,gBAAgBP,mBAC3D,mBAAGlG,UAAU,uCAAb,mBAAqDqF,EAAO7C,cAA5D,aAAqD,EAAeyD,cC2BjES,EAxE2B,SAACxD,GAAW,IAAD,IAC1CsB,EAAgBlF,YAAY4E,GAA5BM,aAEHmC,EAAiBjC,MAAaC,MAAM,CACpCnB,MAAOkB,MACFG,IAAI,EADF,UACyB,OAAjBL,EAAwB,0FAAsB,GADtD,yBAEgB,OAAjBA,EAAwB,kCAAwB,KACjDM,SAHE,UAG2B,OAAjBN,EAAwB,0FAAsB,GAHxD,yBAIgB,OAAjBA,EAAwB,uBAAsB,KACpDpE,KAAMsE,MACD2B,IADC,UACuB,OAAjB7B,EAAwB,8GAA2B,GADzD,yBAEiB,OAAjBA,EAAwB,8BAA0B,KACnDM,SAHC,UAG4B,OAAjBN,EAAwB,iDAAgB,GAHnD,yBAIiB,OAAjBA,EAAwB,uBAAsB,OAGxD,EAAsEQ,YAAqB,CACvFC,SAAUC,YAAYyB,GACtBxB,KAAM,aAFHC,EAAP,EAAOA,SAAP,IAAiBE,UAAYD,EAA7B,EAA6BA,OAAQ3B,EAArC,EAAqCA,QAAU6B,EAA/C,EAA+CA,aAAce,EAA7D,EAA6DA,MAKtD3C,EAAcrE,YAAY0E,GAA1BL,WAEAiD,EAAuBtH,YAAYwE,GAAnC8C,oBAEPlB,qBAAU,WACNY,MAED,CAACA,EAAOM,IAEX,IAAMvD,EAAWkC,GAAa,SAAAI,GAC1BzC,EAAM2D,WAAW,CACbrD,MAAOmC,EAAKnC,MACZpD,KAAMuF,EAAKvF,UAInB,OACI,eAAC,EAAD,CAAegD,OAAQwD,EACRzD,OAAQ,CACJ7C,KAAM,WACNkD,MAAM,GAAD,OAAKY,EAASI,GAAcsC,cAActD,OAC/CK,WAAW,GAAD,OAAKO,EAASI,GAAcsC,cAAcjD,YACpDD,kBAAkB,GAAD,OAAKQ,EAASI,GAAcsC,cAAclD,mBAC3DL,SAAU,YAGdP,QAASE,EAAMF,QACfK,SAAUA,EACVK,QAASA,EACTC,WAAYA,EAZ3B,UAgBI,+CAAO1D,KAAK,QACDmF,EAAS,QAAS,CAACN,UAAU,KADxC,IAEO9E,UAAU,cAAc8F,GAAG,QAC3BC,YAAa3B,EAASI,GAAcsC,cAAcd,mBACzD,mBAAGhG,UAAU,sCAAb,mBAAoDqF,EAAO7B,aAA3D,aAAoD,EAAcyC,UAElE,+CAAOhG,KAAK,MAAMD,UAAU,eACjBoF,EAAS,OAAQ,CAACN,UAAU,KADvC,IAEOxE,KAAK,OAAOwF,GAAG,OACfC,YAAa3B,EAASI,GAAcsC,cAAcZ,mBACzD,mBAAGlG,UAAU,qCAAb,mBAAmDqF,EAAOjF,YAA1D,aAAmD,EAAa6F,cC5C7Dc,EA7BoC,SAAC,GAAuC,IAAtC1D,EAAqC,EAArCA,SAAUL,EAA2B,EAA3BA,QAASgE,EAAkB,EAAlBA,aAE7DC,EAAyB3H,YAAYwE,GAArCmD,sBAEAtD,EAAcrE,YAAY0E,GAA1BL,WAOP,OACI,cAAC,EAAD,CAAeP,OAAQ6D,EACR9D,OAAQ,CACJ7C,KAAM,oBACNkD,MAAO,2DACPK,WAAY,eACZD,kBAAmB,MACnBL,SAAU,qBAEdP,QAASA,EACTU,SAAS,EACTC,WAAYA,EACZN,SAjBnB,SAAsB6D,GAClBA,EAAEC,iBACF9D,EAAS2D,O,OCoDFI,EArDW,SAAC,GAAuB,IAAD,IAArBC,EAAqB,EAArBA,gBAEjB7C,EAAgBlF,YAAY4E,GAA5BM,aAED8C,EAAS5C,MAAaC,MAAM,CAC9B4C,MAAO7C,MACF8C,MADE,UACwB,OAAjBhD,EAAwB,sQAAsD,GADrF,yBAEgB,OAAjBA,EAAwB,wEAA8D,KACvFM,SAHE,UAG2B,OAAjBN,EAAwB,8KAAoC,GAHtE,yBAIgB,OAAjBA,EAAwB,uBAAsB,KACpDiD,SAAU/C,MACLG,IAAI,EADC,UACqB,OAAjBL,EAAwB,mNAAgD,GAD5E,yBAEa,OAAjBA,EAAwB,kCAAwB,KACjDkD,IAAI,GAHC,UAGsB,OAAjBlD,EAAwB,mNAAgD,GAH7E,yBAIa,OAAjBA,EAAwB,+BAAwB,KACjDM,SALK,UAKwB,OAAjBN,EAAwB,8KAAoC,GALnE,yBAMa,OAAjBA,EAAwB,uBAAsB,OAGxD,EAAsDQ,YAAqB,CACvEC,SAAUC,YAAYoC,GACtBnC,KAAM,aAFHC,EAAP,EAAOA,SAAsBC,EAA7B,EAAiBC,UAAYD,OAASE,EAAtC,EAAsCA,aAKtC,EAA0BoC,mBAAiB,IAA3C,mBAAOH,EAAP,KAAcI,EAAd,KACA,EAAgCD,mBAAiB,IAAjD,mBAAOF,EAAP,KAAiBI,EAAjB,KAMA,OACI,uBAAMxE,SAAUkC,GALpB,WACI8B,EAAgBG,EAAOC,MAIiBzH,UAAU,kBAAkB8H,YAAU,EAA9E,UACI,oBAAI9H,UAAU,gBAAd,SAA+BoE,EAASI,GAAcuD,MAAMvE,QAC5D,+CAAOvD,KAAK,QAAQD,UAAU,gBACvB+F,YAAY,SACRX,EAAS,QAAS,CAACN,UAAU,KAFxC,IAGOkD,SAAU,SAACd,GAAD,OAAOU,EAASV,EAAEe,OAAOnG,QACnCA,MAAO0F,GAAS,MAEvB,mBAAGxH,UAAU,gBAAb,mBAA8BqF,EAAOkC,aAArC,aAA8B,EAActB,UAC5C,+CAAOhG,KAAK,WAAWD,UAAU,gBAC1B+F,YAAa3B,EAASI,GAAcuD,MAAMhC,YAC1CjE,MAAO2F,GAAY,IACfrC,EAAS,WAAY,CAACN,UAAU,KAH3C,IAIOkD,SAAU,SAACd,GAAD,OAAOW,EAAYX,EAAEe,OAAOnG,WAE7C,mBAAG9B,UAAU,gBAAb,mBAA8BqF,EAAOoC,gBAArC,aAA8B,EAAiBxB,UAC/C,wBAAQhG,KAAK,SAASD,UAAU,iBAAhC,SAAkDoE,EAASI,GAAcuD,MAAMlE,iB,QCU5EqE,GAxDiB,SAAC,GAAsB,IAAD,IAApBC,EAAoB,EAApBA,eAEvB3D,EAAgBlF,YAAY4E,GAA5BM,aAED8C,EAAS5C,MAAaC,MAAM,CAC9B4C,MAAO7C,MACF8C,MADE,UACwB,OAAjBhD,EAAwB,sQAAsD,GADrF,yBAEgB,OAAjBA,EAAwB,wEAA8D,KACvFM,SAHE,UAG2B,OAAjBN,EAAwB,8KAAoC,GAHtE,yBAIgB,OAAjBA,EAAwB,uBAAsB,KACpDiD,SAAU/C,MACLG,IAAI,EADC,UACqB,OAAjBL,EAAwB,mNAAgD,GAD5E,yBAEa,OAAjBA,EAAwB,kCAAwB,KACjDkD,IAAI,GAHC,UAGsB,OAAjBlD,EAAwB,mNAAgD,GAH7E,yBAIa,OAAjBA,EAAwB,+BAAwB,KACjDM,SALK,UAKwB,OAAjBN,EAAwB,8KAAoC,GALnE,yBAMa,OAAjBA,EAAwB,uBAAsB,OAGxD,EAAsDQ,YAAqB,CACvEC,SAAUC,YAAYoC,GACtBnC,KAAM,WAFHC,EAAP,EAAOA,SAAsBC,EAA7B,EAAiBC,UAAYD,OAASE,EAAtC,EAAsCA,aAKtC,EAA0BoC,mBAAiB,IAA3C,mBAAOH,EAAP,KAAcI,EAAd,KACA,EAAgCD,mBAAiB,IAAjD,mBAAOF,EAAP,KAAiBI,EAAjB,KAKA,OACI,uBAAMxE,SAAUkC,GALpB,WACI4C,EAAeX,EAAOC,MAIkBzH,UAAU,kBAAkB8H,YAAU,EAA9E,UACI,oBAAI9H,UAAU,gBAAd,SAA+BoE,EAASI,GAAcY,SAAS5B,QAC/D,+CAAOvD,KAAK,QAAQD,UAAU,gBACvB+F,YAAY,QACZjE,MAAO0F,GAAS,IACZpC,EAAS,QAAS,CAACN,UAAU,KAHxC,IAIOkD,SAAU,SAACd,GAAD,OAAOU,EAASV,EAAEe,OAAOnG,WAE1C,mBAAG9B,UAAU,gBAAb,mBAA8BqF,EAAOkC,aAArC,aAA8B,EAActB,UAC5C,+CAAOhG,KAAK,WAAWD,UAAU,gBAAgB+F,YAAa3B,EAASI,GAAcY,SAASW,YACvFjE,MAAO2F,GAAY,IACfrC,EAAS,WAAY,CAACN,UAAU,KAF3C,IAGOkD,SAAU,SAACd,GAAD,OAAOW,EAAYX,EAAEe,OAAOnG,WAE7C,mBAAG9B,UAAU,gBAAb,mBAA8BqF,EAAOoC,gBAArC,aAA8B,EAAiBxB,UAC/C,wBAAQhG,KAAK,SAASD,UAAU,iBAAhC,SAAkDoE,EAASI,GAAcY,SAASvB,aAClF,oBAAG7D,UAAU,0BAAb,UAAwCoE,EAASI,GAAcY,SAASgD,KACpE,cAAC,IAAD,CAAMC,GAAG,WAAT,SACI,yBAAQrI,UAAU,qBAAlB,cAAyCoE,EAASI,GAAcY,SAASkD,oBCxEhFC,GAAW,gCAgDxB,SAASC,GAAeC,GACpB,OAAIA,EAAIC,GACGD,EAAIE,OAERC,QAAQC,OAAR,gDAA0BJ,EAAIK,SC3CzC,IAgBeC,GAhBqC,SAAC7F,GAEjD,OACI,qBAAKlD,UAAS,iBAAYkD,EAAME,QAAU,gBAA1C,SACI,sBAAKpD,UAAU,mBAAf,UACI,wBAAQE,QAASgD,EAAMF,QAAS/C,KAAK,SAASD,UAAU,wBAExD,sBAAKA,UAAU,yBAAf,UACI,qBAAKA,UAAWkD,EAAMlD,YACtB,oBAAIA,UAAU,sBAAd,SAAqCkD,EAAMkF,gBCAhDY,GAV8B,SAAC,GAAuB,IAAtBhG,EAAqB,EAArBA,QAASI,EAAY,EAAZA,OAKpD,OACI,cAAC,GAAD,CAAoBJ,QAASA,EAASI,OAAQA,EAAQgF,KAJ7C,wKAIyDpI,UAHpD,wBCMPiJ,GATwB,SAAC,GAAuB,IAAtBjG,EAAqB,EAArBA,QAASI,EAAY,EAAZA,OAI9C,OACI,cAAC,GAAD,CAAoBJ,QAASA,EAASI,OAAQA,EAAQgF,KAJ7C,qMAIyDpI,UAHpD,qBCRhBkJ,GAAW,WAWXC,GAAsB,CACxB3E,aAAc,MCmDH4E,GAlDkB,SAAC,GAA6B,IAA5BC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,aAElCjH,EAAWC,cAEVkC,EAAgBlF,YAAY4E,GAA5BM,aAEP,SAAS+E,EAAYzH,GACjBO,EDSe,SAACP,GAAD,MAA8B,CACjD7B,KAAMiJ,GACNnH,QAASD,GCXI0H,CAAQ1H,IAGrB,OACI,yBAAQ9B,UAAU,SAAlB,UACI,mBAAGyJ,KAAK,IAAIxB,OAAO,SAASjI,UAAU,SACtC,sBAAKA,UAAU,sBAAf,UACI,wBAAQA,UAAS,yBAAqC,OAAjBwE,GAAyB,sBACtDtE,QAAS,WAAMqJ,EAAY,OADnC,gBAIA,wBAAQvJ,UAAS,yBAAqC,OAAjBwE,GAAyB,sBACtDtE,QAAS,kBAAMqJ,EAAY,OADnC,mBAGJ,sBAAKvJ,UAAU,kBAAf,UACKsJ,GAAgB,mBAAGtJ,UAAU,wBAAb,SAAsCsJ,IACvD,eAAC,IAAD,WACI,cAAC,IAAD,CAAOI,OAAK,EAACC,KAAK,IAAlB,SACI,wBAAQzJ,QAASmJ,EACTrJ,UAAU,yBADlB,SAEKoE,EAASI,GAAcoF,OAAOC,YAGvC,cAAC,IAAD,CAAOH,OAAK,EAACC,KAAK,WAAlB,SACI,cAAC,IAAD,CAAMtB,GAAG,WAAT,SACI,wBAAQrI,UAAU,yBAAlB,SACKoE,EAASI,GAAcoF,OAAOE,aAI3C,cAAC,IAAD,CAAOJ,OAAK,EAACC,KAAK,WAAlB,SACI,cAAC,IAAD,CAAMtB,GAAG,WAAT,SACI,wBAAQrI,UAAU,yBAAlB,SACKoE,EAASI,GAAcoF,OAAOG,uBC/ClDC,GAAmB,SAAClI,GAAD,MAAwC,CACpE7B,KAAM2B,EACNG,QAASD,ICFAmI,GAAyB,SAACnI,GAAD,MAA8C,CAChF7B,KAAMkB,EACNY,QAASD,ICDAoI,GAAiB,SAACpI,GAAD,MAAoC,CAC9D7B,KAAMc,EACNgB,QAASD,ICHAqI,GAAkB,SAACrI,GAAD,MAAsC,CACjE7B,KAAMyB,EACNK,QAASD,ICFAsI,GAAc,SAACtI,GAAD,MAAmC,CAC1D7B,KAAMwB,EACNM,QAASD,ICFAuI,GAAgB,SAACvI,GAAD,MAAqC,CAC9D7B,KAAMuB,EACNO,QAASD,ICDAwI,GAAe,SAACnI,GAAD,MAAoC,CAC5DlC,KAAMoB,EACNU,QAASI,I,gBCuHEoI,GARD,I,WAxGV,cAAyC,IAA5BC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,QAAkB,0BAHxCC,SAGwC,OAFxCC,WAEwC,EACpCC,KAAKF,IAAMF,EACXI,KAAKD,MAAQF,EAAQI,c,oDAGzB,WACI,OAAOC,MAAM,GAAD,OAAIF,KAAKF,IAAT,SAAqB,CAC7BD,QAAS,CACLI,cAAeD,KAAKD,SAGvBI,KAAKH,KAAKI,mB,mCAGnB,WACI,OAAOF,MAAM,GAAD,OAAIF,KAAKF,IAAT,YAAwB,CAChCD,QAAS,CACLI,cAAeD,KAAKD,SAGvBI,KAAKH,KAAKI,mB,mCAGnB,YAA0D,IAAnCpG,EAAkC,EAAlCA,SAAUG,EAAwB,EAAxBA,YAC7B,OAAO+F,MAAM,GAAD,OAAIF,KAAKF,IAAT,YAAwB,CAChCO,OAAQ,QACRR,QAAS,CACLI,cAAeD,KAAKD,MACpB,eAAgB,oBAEpBO,KAAMC,KAAKC,UAAU,CACjB9K,KAAMsE,EACNnC,MAAOsC,MAGVgG,KAAKH,KAAKI,mB,6BAGnB,YAAwC,IAAvBxH,EAAsB,EAAtBA,MAAOpD,EAAe,EAAfA,KACpB,OAAO0K,MAAM,GAAD,OAAIF,KAAKF,IAAT,SAAqB,CAC7BO,OAAQ,OACRR,QAAS,CACLI,cAAeD,KAAKD,MACpB,eAAgB,oBAEpBO,KAAMC,KAAKC,UAAU,CACjB9K,KAAMkD,EACNpD,KAAMA,MAGT2K,KAAKH,KAAKI,mB,kCAGnB,SAAqBrF,GACjB,OAAOmF,MAAM,GAAD,OAAIF,KAAKF,IAAT,iBAAqB/E,GAAQ,CACrCsF,OAAQ,SACRR,QAAS,CACLI,cAAeD,KAAKD,MACpB,eAAgB,sBAGnBI,KAAKH,KAAKI,mB,kCAGnB,SAAqBlF,EAAYnG,GAC7B,IAAIsL,EAMJ,OAFIA,EAHCtL,EAGQ,MAFA,SAINmL,MAAM,GAAD,OAAIF,KAAKF,IAAT,uBAA2B5E,GAAM,CACzCmF,OAAQA,EACRR,QAAS,CACLI,cAAeD,KAAKD,MACpB,eAAgB,sBAGnBI,KAAKH,KAAKI,mB,0BAGnB,SAAaK,GACT,OAAOP,MAAM,GAAD,OAAIF,KAAKF,IAAT,mBAA+B,CACvCO,OAAQ,QACRR,QAAS,CACLI,cAAeD,KAAKD,MACpB,eAAgB,oBAEpBO,KAAMC,KAAKC,UAAU,CACjB5I,OAAQ6I,EAAK7I,WAGhBuI,KAAKH,KAAKI,mB,6BAGnB,SAAgBvC,GACZ,OAAIA,EAAIC,GACGD,EAAIE,OAERC,QAAQC,OAAR,gDAA0BJ,EAAIK,a,KAK/B,CAAU,CACpB0B,QAAS,+CACTC,QAAS,CACLI,cAAe,uCACf,eAAgB,sBCmGTS,GAtLC,WAEZ,IAAMjJ,EAAWC,cAEVH,EAAS7C,YAAY0C,GAArBG,MACP,EAA6B7C,YAAYT,GAAlCQ,EAAP,EAAOA,KAAMiK,EAAb,EAAaA,aACb,EAA+ChK,YAAY0E,GAApDuH,EAAP,EAAOA,aAAcvE,EAArB,EAAqBA,aAAcwE,EAAnC,EAAmCA,SACnC,EAA0ClM,YAAYwE,GAA/C2H,EAAP,EAAOA,iBAAkBC,EAAzB,EAAyBA,cACnBC,EAAUC,cA8DhB,SAASC,IACLxJ,EC1GsE,CAC1EpC,KAAMmB,EACNW,SDwGiC,IAC7BM,EAASR,EAAgB,OAqE7B,OAnIA6D,qBAAU,WACNrD,EAASiI,IAAa,IACtB,IAAIwB,EAAiBvB,GAAMwB,kBACvBC,EAAwBzB,GAAMyB,wBAElCpD,QAAQqD,IAAI,CAACH,EAAgBE,IACxBjB,MAAK,YAA2B,IAAD,mBAAxBmB,EAAwB,KAAdC,EAAc,KAC5B9J,EElDe,SAACF,GAAD,MAAuC,CAClElC,KAAMU,EACNoB,QAASI,GFgDYiK,CAAgBF,IACzB7J,EAAS6H,GAAeiC,OACzBE,OAAM,SAACC,GACVC,QAAQC,IAAIF,MACbG,SAAQ,WACPpK,EAASiI,IAAa,SAG3B,CAACjI,IAYJqD,qBAAU,WACN,GAAIgH,aAAaC,QAAQ,OAAQ,CAC7B,IAAMC,EAAMF,aAAaC,QAAQ,Qd7ClBhC,Ec8CCiC,Ed7CjB9B,MAAM,GAAD,OAAIvC,GAAJ,aAAyB,CACjC0C,OAAQ,MACRR,QAAS,CACL,eAAgB,mBAChB,cAAgB,UAAhB,OAA2BE,MAG9BI,MAAK,SAAC8B,GAAD,OAAcrE,GAAeqE,MAAW9B,MAAK,SAAApF,GAAI,OAAIA,McsClCoF,MAAK,SAACtC,GACnBA,IACApG,EAAS8H,GAAgB1B,EAAI9C,KAAK6B,QAClCnF,EAAS+H,IAAY,IACrBuB,EAAQmB,KAAK,SdlDP,IAACnC,IcsDpB,CAACgB,EAAStJ,IA8FL,qBAAKrC,UAAU,MAAf,SACI,qBAAKA,UAAU,OAAf,SACI,sBAAKA,UAAU,gBAAf,UACI,cAAC,GAAD,CAAcgD,QAAS6I,EACTzI,OAAQqI,IACtB,cAAC,GAAD,CAAWzI,QAAS6I,EAAgBzI,OAAQsI,IAC5C,cAAC,EAAD,CAAYzM,KAAMsM,EAAcvI,QAAS6I,IACzC,cAAC,EAAD,CAAkBjG,aA1EtC,SAA0B9D,GACtBO,EAASgI,IAAc,IACvBE,GAAMwC,sBAAsBjL,GAAOiJ,MAAK,SAAApF,GACpCtD,EAAS6H,GAAevE,IACxBkG,OACDQ,OAAM,SAACW,GACNT,QAAQC,IAAIQ,MACbP,SAAQ,WACPpK,EAASgI,IAAc,QAmEOrH,QAAS6I,IAC3B,cAAC,EAAD,CAAiBrF,eAhErC,SAA4BpG,GACxBiC,EAASgI,IAAc,IACvBE,GAAM0C,aAAa7M,GAAM2K,MAAK,SAAApF,GAC1BtD,EAAS6H,GAAevE,IACxBkG,OACDQ,OAAM,SAACW,GACNT,QAAQC,IAAIQ,MACbP,SAAQ,WACPpK,EAASgI,IAAc,QAyDMrH,QAAS6I,IAE1B,cAAC,EAAD,CAAe7I,QAAS6I,EAAgBhF,WAvD5D,SAA8B/E,GAC1BO,EAASgI,IAAc,IACvBE,GAAM2C,gBAAgBpL,GAAOiJ,MAAK,SAAApF,GAC9BtD,EGxIuC,CAC/CpC,KAAMW,EACNmB,QHsIyB4D,IACjBkG,OACDQ,OAAM,SAACW,GACNT,QAAQC,IAAIQ,MACbP,SAAQ,WACPpK,EAASgI,IAAc,UAgDX,cAAC,EAAD,CAAiBrH,QAAS6I,EACTxI,SArGrC,SAAgCpE,GAC5BoD,EAASgI,IAAc,IACvBE,GAAM4C,qBAAqBlO,EAAKQ,KAAKsL,MAAK,SAACpF,GACvC,GAAqB,kEAAjBA,EAAKM,QAA2B,CAChC,IAAImH,EAAgBjL,EAAMkL,QAAO,SAAAhC,GAAI,OAAIA,IAASpM,KAClDoD,EI3FU,SAACF,GAAD,MAAkC,CACxDlC,KAAMY,EACNkB,QAASI,GJyFYmL,CAAWF,IACpB/K,EAAS4H,IAAuB,QAErCoC,OAAM,SAACW,GACNT,QAAQC,IAAIQ,MACbP,SAAQ,WACPpK,EAASgI,IAAc,QA2FMrD,aAAcA,IAC/B,cAAC,GAAD,CAAQsC,aAAcA,EAAcD,QAxBxD,WACIqD,aAAaa,WAAW,OACxB5B,EAAQmB,KAAK,YACbzK,EAAS+H,IAAY,IACrB/H,EAAS8H,GAAgB,QAqBT,eAAC,IAAD,WACI,cAAC,IAAD,CAAOT,OAAK,EAACC,KAAK,IAAlB,SACK6B,EAAW,cAAC,EAAD,CAAMrM,WAtI9C,SAAwBF,GACpB,IAAMU,EAAUV,EAAKW,MAAMC,MAAK,SAAAC,GAAC,OAAIA,EAAEL,MAAQJ,EAAKI,OACpD8K,GAAMiD,qBAAqBvO,EAAKQ,KAAME,GAASoL,MAAK,SAAC0C,GACjD,IAAIC,EAAavL,EAAMO,KAAI,SAACiL,GAAD,OAAOA,EAAElO,MAAQR,EAAKQ,IAAMgO,EAAUE,KACjEtL,EKhEY,SAACF,GAAD,MAAgC,CACpDlC,KAAMa,EACNiB,QAASI,GL8DQyL,CAASF,OACnBrB,OAAM,SAACW,GACNT,QAAQC,IAAIQ,OAiI0B5N,aAhH9C,SAA0BH,GACtBoD,EAAS4H,IAAuB,IAChC5H,EMtF4D,CAChEpC,KAAMsB,EACNQ,QNoF6B9C,OA+GG,cAAC,IAAD,CAAUoJ,GAAG,eAErB,cAAC,IAAD,CAAOsB,KAAK,WAAZ,SACI,cAAC,EAAD,CAAOtC,gBAvDnC,SAAyBG,EAAeC,Id1InB,SAACD,EAAeC,GACrC,OAAOqD,MAAM,GAAD,OAAIvC,GAAJ,WAAuB,CAC/B0C,OAAQ,OACRR,QAAS,CACL,OAAU,mBACV,eAAgB,oBAEpBS,KAAMC,KAAKC,UAAU,CACjB3D,SAAUA,EACVD,MAAOA,MAGVuD,MAAK,SAAC8B,GAAD,OAAcrE,GAAeqE,MAClC9B,MAAK,SAACpF,GACH,GAAIA,EAAKgF,MAGL,OAFA+B,aAAamB,QAAQ,MAAOlI,EAAKgF,OAE1BhF,Mc0HfmI,CAAetG,EAAOC,GAAUsD,MAAK,SAACpF,GAC9BA,EAAKgF,QACLtI,EAAS+H,IAAY,IACrB/H,EAAS8H,GAAgB3C,IACzBmE,EAAQmB,KAAK,SAElBT,OAAM,SAACW,GACN3K,EAAS2H,IAAiB,IAC1BuC,QAAQC,IAAIQ,WAgDI,cAAC,IAAD,CAAOrD,KAAK,WAAZ,SACI,cAAC,GAAD,CAAUxB,eA7CtC,SAAwBX,EAAeC,IdrKnB,SAACD,EAAeC,GAEpC,OAAOqD,MAAM,GAAD,OAAIvC,GAAJ,WAAuB,CAC/B0C,OAAQ,OACRR,QAAS,CACL,eAAgB,oBAEpBS,KAAMC,KAAKC,UAAU,CACjB3D,SAAUA,EACVD,MAAOA,MAGVuD,MAAK,SAAC8B,GAAD,OAAcrE,GAAeqE,MAAW9B,MAAK,SAAApF,GAAI,OAAIA,Mc0J3DmI,CAActG,EAAOC,GAAUsD,MAAK,SAAC8B,GACjCxK,EOjKkE,CAC1EpC,KAAM0B,EACNI,SP+JqC,IAC7B4J,EAAQmB,KAAK,eACdT,OAAM,SAACW,GACNT,QAAQC,IAAIQ,GACZ3K,EAAS2H,IAAiB,YAyCV,cAAC,IAAD,CAAOL,KAAK,IAAZ,SACK6B,EAAW,cAAC,IAAD,CAAUnD,GAAG,MAAQ,cAAC,IAAD,CAAUA,GAAG,kBAGtD,cAAC,EAAD,YQ9MT0F,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBlD,MAAK,YAAkD,IAA/CmD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,0BCFR7E,GAA8B,CAChChH,MAAO,GACPC,WAAW,GAoCAH,GAhCM,WAA2D,IAA1DnD,EAAyD,uDAAjDqK,GAAc7F,EAAmC,uCAC3E,OAAQA,EAAOrD,MACX,KAAKU,EACD,OAAO,2BACA7B,GADP,IAEIqD,MAAOmB,EAAOvB,UAEtB,KAAKnB,EACD,OAAO,2BACA9B,GADP,IAEIqD,MAAM,CAAEmB,EAAOvB,SAAV,oBAAsBjD,EAAMqD,UAEzC,KAAKtB,EAKL,KAAKC,EACD,OAAO,2BACAhC,GADP,IAEIqD,MAAOmB,EAAOvB,UAEtB,KAAKV,EACD,OAAO,2BACAvC,GADP,IAEIsD,UAAWkB,EAAOvB,UAE1B,QACI,OAAOjD,ICnCbqK,GAAqC,CACvC9J,KAAM,CACFoD,MAAO,GACPD,OAAQ,GACR+L,OAAQ,GACRjO,KAAM,GACNb,IAAK,IAET6J,aAAc,IAsBHvK,GAnBK,WAAkE,IAAjED,EAAgE,uDAAxDqK,GAAc7F,EAA0C,uCACjF,OAAQA,EAAOrD,MACX,KAAKc,EACD,OAAO,2BACAjC,GADP,IAEIO,KAAMiE,EAAOvB,UAErB,KAAKL,EACD,OAAO,2BACA5C,GADP,IAEIwK,aAAchG,EAAOvB,UAG7B,QACI,OAAOjD,ICnBbqK,GAAwB,CAC1B1D,wBAAwB,EACxBmB,qBAAqB,EACrBL,uBAAuB,EACvBU,uBAAuB,EACvBwE,kBAAkB,EAClBC,eAAe,GAmDJ3H,GAhDA,WAA4C,IAA3CjF,EAA0C,uDAAlCqK,GAAc7F,EAAoB,uCACtD,OAAQA,EAAOrD,MACX,KAAKe,EACD,OAAO,2BACAlC,GADP,IAEI2G,uBAAwBnC,EAAOvB,UAEvC,KAAKd,EACD,OAAO,2BACAnC,GADP,IAEI8H,oBAAqBtD,EAAOvB,UAEpC,KAAKb,EACD,OAAO,2BACApC,GADP,IAEIyH,sBAAuBjD,EAAOvB,UAEtC,KAAKZ,EACD,OAAO,2BACArC,GADP,IAEImI,sBAAuB3D,EAAOvB,UAEtC,KAAKJ,EACD,OAAO,2BACA7C,GADP,IAEI2M,iBAAkBnI,EAAOvB,UAEjC,KAAKH,EACD,OAAO,2BACA9C,GADP,IAEI4M,cAAepI,EAAOvB,UAE9B,KAAKX,EACD,OAAO,2BACAtC,GADP,IAEImI,sBAAuB3D,EAAOvB,QAC9BwE,sBAAuBjD,EAAOvB,QAC9B6E,oBAAqBtD,EAAOvB,QAC5B0D,uBAAwBnC,EAAOvB,QAC/B0J,iBAAkBnI,EAAOvB,QACzB2J,cAAepI,EAAOvB,UAE9B,QACI,OAAOjD,ICzDbqK,GAA8B,CAChCoC,aAAc,KACdvE,aAAc,KACdrD,YAAY,EACZ6H,UAAU,GA8BCvH,GA3BM,WAA4C,IAA3CnF,EAA0C,uDAAlCqK,GAAc7F,EAAoB,uCAC5D,OAAQA,EAAOrD,MACX,KAAKqB,EACD,OAAO,2BACAxC,GADP,IAEIyM,aAAcjI,EAAOvB,UAE7B,KAAKR,EACD,OAAO,2BACAzC,GADP,IAEIkI,aAAc1D,EAAOvB,UAE7B,KAAKP,EACD,OAAO,2BACA1C,GADP,IAEI6E,WAAYL,EAAOvB,UAE3B,KAAKN,EACD,OAAO,2BACA3C,GADP,IAEI0M,SAAUlI,EAAOvB,UAEzB,QACI,OAAOjD,ICjBJ0P,GATKC,aAAgB,CAChCxM,aAAcA,GACdlD,YAAaA,GACbgF,OAAQA,GACRE,aAAcA,GACdE,YvBGuB,WAA6C,IAA5CrF,EAA2C,uDAAnCqK,GAAc7F,EAAqB,uCAEnE,OAAQA,EAAOrD,MACX,KAAKiJ,GACD,OAAO,2BACApK,GADP,IAEI0F,aAAclB,EAAOvB,UAE7B,QACI,OAAOjD,MwBdb4P,GAAmBC,OAAOC,sCAAwCC,KAIzDC,GAFDC,aAAYP,GAAaE,GAAiBM,aAAgBC,QCJxEC,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,CAAeC,SAAUC,WAAzB,SACI,cAAC,IAAD,CAAUR,MAAOA,GAAjB,SACI,cAAC,IAAD,UACI,cAAC,GAAD,YAKhBS,SAASC,eAAe,SAI5BzB,M","file":"static/js/main.909c25d4.chunk.js","sourcesContent":["import {AppStateType} from \"../store\";\n\nexport const selectCurrentUser = (state:AppStateType) =>\n    state.currentUser","import React, {FC} from \"react\";\nimport {useSelector} from \"react-redux\";\nimport {ICard} from \"../types/cardType\";\nimport {selectCurrentUser} from \"../redux/selectors/selectCurrentUser\";\n\ntype TCard = {\n    card: ICard\n    onCardClick: (arg: ICard) => void\n    onCardLike: (arg: ICard) => void\n    onCardDelete: (arg: ICard) => void\n}\n\nconst Card: FC<TCard> = ({card, onCardClick, onCardLike, onCardDelete}) => {\n\n    const {user} = useSelector(selectCurrentUser)\n\n    const isOwn = card.owner._id === user._id;\n\n    const cardDeleteButtonClassName = (\n        `element__button-delete ${!isOwn ? 'card__delete-button_hidden' : ''}`\n    );\n\n    const isLiked = card.likes.some(i => i._id === user._id);\n\n    const cardLikeButtonClassName = `element__like ${isLiked ? 'element__like_active' : ''}`;\n\n    function handleLikeClick(): void {\n        onCardLike(card)\n    }\n\n    function handleDeleteClick(): void {\n        onCardDelete(card)\n    }\n\n    return (\n        <li className=\"element\">\n            <button type=\"button\" className={cardDeleteButtonClassName}\n                    onClick={handleDeleteClick}/>\n            <img src={card.link} alt={card.name} onClick={() => onCardClick(card)}\n                 className=\"element__image\"/>\n            <div className=\"element__group\">\n                <h2 className=\"element__title\">{card.name}</h2>\n                <div className=\"element__like-group\">\n                    <button type=\"button\" className={cardLikeButtonClassName}\n                            onClick={handleLikeClick}/>\n                    <span className=\"element__like-counter\">{card.likes.length}</span>\n                </div>\n            </div>\n        </li>\n    )\n}\n\nexport default Card","import {FC} from \"react\";\n\nexport const Spinner:FC = () => {\n\n  return <div style={{height: '71vh'}}>\n    <div className=\"Spinner\"/>\n  </div>\n}","export const SET_CARDS = 'SET_CARDS';\nexport const ADD_CARD = 'ADD_CARD';\nexport const DELETE_CARD = 'DELETE_CARD';\nexport const LIKE_CARD = 'LIKE_CARD';\nexport const SET_USER = 'SET_USER';\nexport const SET_EDIT_PROFILE_POPUP_OPEN = 'SET_EDIT_PROFILE_POPUP_OPEN';\nexport const SET_ADD_PLACE_POPUP_OPEN = 'SET_ADD_PLACE_POPUP_OPEN';\nexport const SET_EDIT_AVATAR_POPUP_OPEN = 'SET_EDIT_AVATAR_POPUP_OPEN';\nexport const SET_POPUP_WITH_SUBMIT_OPEN = 'SET_POPUP_WITH_SUBMIT_OPEN';\nexport const CLOSE_ALL_POPUPS = 'CLOSE_ALL_POPUPS';\nexport const SET_LOADING = 'SET_LOADING';\nexport const SET_SELECTED_CARD = 'SET_SELECTED_CARD';\nexport const SET_CARD_TO_DELETE = 'SET_CARD_TO_DELETE';\nexport const SET_LOADING_BTN = 'SET_LOADING_BTN';\nexport const SET_LOGGED_IN = 'SET_LOGGED_IN';\nexport const SET_CURRENT_EMAIL = 'SET_CURRENT_EMAIL';\nexport const SET_SUCCESS_POPUP_OPEN = 'SET_SUCCESS_POPUP_OPEN';\nexport const SET_FAIL_POPUP_OPEN = 'SET_FAIL_POPUP_OPEN';\n","import {SET_SELECTED_CARD} from \"../../constants/constants\";\nimport {ICard} from \"../../../types/cardType\";\n\n\nexport interface ISetSelectedCard {\n    type: typeof SET_SELECTED_CARD,\n    payload: ICard | null\n}\n\nexport const setSelectedCard = (value: ICard | null): ISetSelectedCard => ({\n    type: SET_SELECTED_CARD,\n    payload: value,\n});","import {AppStateType} from \"../store\";\n\nexport const selectInitialCards = (state:AppStateType) =>\n    state.initialCards","import Card from \"./Card\";\nimport React, {FC} from \"react\";\nimport {Spinner} from \"./Spinner\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {setIsEditAvatarPopupOpen} from \"../redux/actions/popupsActions/setIsEditAvatarPopupOpen\";\nimport {setIsAddPlacePopupOpen} from \"../redux/actions/popupsActions/setIsAddPlacePopupOpen\";\nimport {setIsEditProfilePopupOpen} from \"../redux/actions/popupsActions/setIsEditProfilePopupOpen\";\nimport {setSelectedCard} from \"../redux/actions/cartdSettingActions/setSelectedCard\";\nimport {selectInitialCards} from \"../redux/selectors/selectInitialCards\";\nimport {selectCurrentUser} from \"../redux/selectors/selectCurrentUser\";\nimport {ICard} from \"../types/cardType\";\n\n\nexport type TMain = {\n    onCardLike: (elem: ICard) => void\n    onCardDelete: (elem: ICard) => void\n}\n\nconst Main: FC<TMain> = ({onCardLike, onCardDelete}) => {\n\n    const {cards, isLoading} = useSelector(selectInitialCards)\n\n    const {user} = useSelector(selectCurrentUser)\n\n    const dispatch = useDispatch()\n\n    function handleEditAvatarClick(): void {\n        dispatch(setIsEditAvatarPopupOpen(true))\n    }\n\n    function handleEditProfileClick(): void {\n        dispatch(setIsEditProfilePopupOpen(true))\n    }\n\n    function handleAddPlaceClick(): void {\n        dispatch(setIsAddPlacePopupOpen(true))\n    }\n\n    function handleCardClick(card: ICard): void {\n        dispatch(setSelectedCard(card))\n    }\n\n    return (\n        <main className=\"main\">\n            {isLoading ? (<Spinner/>) :\n                (<>\n                    <section className=\"profile\">\n                        <div className=\"profile__wrapper\">\n                            <div onClick={handleEditAvatarClick} className=\"profile__image-wrapper\">\n                                <img src={user.avatar} alt=\"фото профиля\"\n                                     className=\"profile__image\"/>\n                                <button className=\"profile__image-btn\"/>\n                            </div>\n                            <div className=\"profile__info\">\n                                <h1 className=\"profile__name\">{user.name}</h1>\n                                <button onClick={handleEditProfileClick} type=\"button\" className=\"profile__button\"/>\n                                <p className=\"profile__job\">{user.about}</p>\n                            </div>\n                        </div>\n                        <button onClick={handleAddPlaceClick} type=\"button\" className=\"profile__button-add\"/>\n                    </section>\n\n                    <section className=\"elements\">\n                        <ul className=\"elements__list\">\n                            {cards.map((card) => <Card\n                                key={card._id} card={card}\n                                onCardClick={handleCardClick}\n                                onCardLike={onCardLike}\n                                onCardDelete={onCardDelete}\n                            />)}\n                        </ul>\n                    </section>\n                </>)}\n        </main>\n    )\n}\n\nexport default Main","import {SET_EDIT_AVATAR_POPUP_OPEN} from \"../../constants/constants\";\n\n\nexport interface ISetIsEditAvatarPopupOpen {\n    type: typeof SET_EDIT_AVATAR_POPUP_OPEN,\n    payload: boolean\n}\n\nexport const setIsEditAvatarPopupOpen = (value: boolean): ISetIsEditAvatarPopupOpen => ({\n    type: SET_EDIT_AVATAR_POPUP_OPEN,\n    payload: value,\n});\n","import {SET_EDIT_PROFILE_POPUP_OPEN} from \"../../constants/constants\";\n\n\nexport interface ISetIsEditProfilePopupOpen {\n    type: typeof SET_EDIT_PROFILE_POPUP_OPEN,\n    payload: boolean\n}\n\nexport const setIsEditProfilePopupOpen = (value: boolean): ISetIsEditProfilePopupOpen => ({\n    type: SET_EDIT_PROFILE_POPUP_OPEN,\n    payload: value,\n});\n\n","import {SET_ADD_PLACE_POPUP_OPEN} from \"../../constants/constants\";\n\n\nexport interface ISetIsAddPlacePopupOpen {\n    type: typeof SET_ADD_PLACE_POPUP_OPEN,\n    payload: boolean\n}\n\nexport const setIsAddPlacePopupOpen = (value: boolean): ISetIsAddPlacePopupOpen => ({\n    type: SET_ADD_PLACE_POPUP_OPEN,\n    payload: value,\n});\n","import {FC} from \"react\";\nimport moment from \"moment\";\n\nconst Footer: FC = () => {\n\n    const currentYear = moment().format('YYYY')\n    \n    return (\n        <footer className=\"footer\">\n            <p className=\"footer__copyright\">© {currentYear} Mesto Russia</p>\n        </footer>\n    )\n}\n\nexport default Footer","import {ICard} from \"../types/cardType\";\nimport {FC, SyntheticEvent} from \"react\";\n\ntype TImagePopup = {\n    card: ICard | null\n    onClose(event: SyntheticEvent): void\n}\n\nconst ImagePopup: FC<TImagePopup> = ({card, onClose}) => {\n\n    return (\n        <div className={`popup popup_type_image ${card && 'popup_opened'}`}>\n            <div className=\"popup__container popup__container_type_image\">\n                <button onClick={onClose} type=\"button\" className=\"popup__button-close popup__button-close_type_image\"/>\n                <img src={card?.link} alt={card?.name} className=\"popup__img\"/>\n                <h2 className=\"popup__title\">{card?.name}</h2>\n            </div>\n        </div>\n    )\n}\n\nexport default ImagePopup\n","import {FC, FormEvent, ReactNode, SyntheticEvent} from \"react\";\nimport {IParam} from \"../types/IParam\";\n\n\n\ntype PopupWithFormPropsType = {\n    onClose(event: SyntheticEvent): void\n    onSubmit(event: FormEvent): void\n    isOpen: boolean\n    loadingBtn: boolean\n    params: IParam\n    children: ReactNode\n    isValid: boolean\n}\n\n\n\nconst PopupWithForm: FC<PopupWithFormPropsType> = (props) => {\n\n\n    return (\n        <div className={`popup popup_${props.params.name} ${props.isOpen && 'popup_opened'}`}>\n            <div className=\"popup__container\">\n                <button onClick={props.onClose} type=\"button\" className=\"popup__button-close\"/>\n                <form onSubmit={props.onSubmit} action=\"#\" className=\"form\" name={props.params.formName}>\n                    <h2 className=\"form__heading\">{props.params.title}</h2>\n                    {props.children}\n                    <button type=\"submit\"\n                            className={`form__button ${!props.isValid && 'form__button_disabled'}`}>{props.loadingBtn ? props.params.buttonLoadingText : props.params.buttonText}</button>\n                </form>\n            </div>\n        </div>\n    )\n}\n\nexport default PopupWithForm\n","import {AppStateType} from \"../store\";\n\n\nexport const selectPopups = (state:AppStateType) =>\n    state.popups","import {AppStateType} from \"../store\";\n\n\nexport const selectCardSettings = (state:AppStateType) =>\n    state.cardSettings","import {AppStateType} from \"../store\";\n\n\nexport const selectLang = (state:AppStateType) =>\n    state.langReducer","export interface ILanguage {\n    [ru: string]: {\n        \"header\": {\n            [key: string]: string\n        }\n        \"addPlacePopup\": {\n            [key: string]: string\n        }\n        \"editAvatarPopup\": {\n            [key: string]: string\n        }\n        'editProfilePopup': {\n            [key: string]: string\n        }\n        'login': {\n            [key: string]: string\n        }\n        'register': {\n            [key: string]: string\n        }\n\n    },\n\n    fi: {\n        \"header\": {\n            [key: string]: string\n        }\n        \"addPlacePopup\": {\n            [key: string]: string\n        }\n        \"editAvatarPopup\": {\n            [key: string]: string\n        }\n        'editProfilePopup': {\n            [key: string]: string\n        }\n        'login': {\n            [key: string]: string\n        }\n        'register': {\n            [key: string]: string\n        }\n\n    }\n}\n\nexport const language: ILanguage = {\n    ru: {\n        \"header\": {\n            \"singOut\": \"Выйти\",\n            \"singIn\": \"Войти\",\n            \"singUp\": \"Регистрация\"\n        },\n        \"addPlacePopup\": {\n            'title': 'Новое место',\n            'buttonText': 'Создать',\n            'buttonLoadingText': 'Создать...',\n            'placeholderName': 'Название',\n            'placeholderLink': 'Ссылка на картинку',\n        },\n        \"editAvatarPopup\": {\n            'title': 'Обновить аватар',\n            'buttonText': 'Сохранить',\n            'buttonLoadingText': 'Сохранить...',\n            'placeholderLink': 'Ссылка на картинку',\n        },\n        'editProfilePopup': {\n            'title': 'Редактировать профиль',\n            'buttonText': 'Сохранить',\n            'buttonLoadingText': 'Сохранить...',\n            'placeholderName': 'Введите имя',\n            'placeholderLink': 'Введите род занятия',\n        },\n        'login': {\n            'title': 'Вход',\n            'buttonText': 'Войти',\n            'placeholder': 'Пароль',\n        },\n        'register': {\n            'title': 'Регистрация',\n            'buttonText': 'Зарегистрироваться',\n            'placeholder': 'Пароль',\n            'text': 'Уже зарегистрированы?',\n            'textBtn': 'Войти'\n        }\n    },\n    fi: {\n        \"header\": {\n            \"singOut\": \"Kirjaudu ulos\",\n            \"singIn\": \"Luo tunnus\",\n            \"singUp\": \"Kirjaudu sisään\"\n        },\n        \"addPlacePopup\": {\n            'title': 'Uusi paikka',\n            'buttonText': 'Luoda',\n            'buttonLoadingText': 'Luoda...',\n            'placeholderName': 'Nimi',\n            'placeholderLink': 'Linkki',\n        },\n        \"editAvatarPopup\": {\n            'title': 'Päivitä avatar',\n            'buttonText': 'Luoda',\n            'buttonLoadingText': 'Luoda...',\n            'placeholderLink': 'Linkki',\n        },\n        'editProfilePopup': {\n            'title': 'Muokata profiili',\n            'buttonText': 'Luoda',\n            'buttonLoadingText': 'Luoda...',\n            'placeholderName': 'Kirjoita nimisi',\n            'placeholderLink': 'Kirjoita ammattisi',\n        },\n        'login': {\n            'title': 'Luo tunnus',\n            'buttonText': 'Luo',\n            'placeholder': 'Salasana',\n        },\n        'register': {\n            'title': 'Kirjaudu sisään',\n            'buttonText': 'Kirjaudu',\n            'placeholder': 'Salasana',\n            'text': 'Oletko jo kirjautunut?',\n            'textBtn': 'Luo tunnus'\n        }\n    }\n}","import React, {FC, SyntheticEvent, useEffect} from \"react\";\nimport PopupWithForm from \"./PopupWithForm\";\nimport {useSelector} from \"react-redux\";\nimport {selectPopups} from \"../redux/selectors/selectPopups\";\nimport {selectCardSettings} from \"../redux/selectors/selectCardSettings\";\nimport {selectCurrentUser} from \"../redux/selectors/selectCurrentUser\";\nimport {IProfile} from \"../types/currentUserAndEmailTypes\";\nimport {useForm} from \"react-hook-form\";\nimport {yupResolver} from \"@hookform/resolvers/yup\";\nimport * as yup from \"yup\";\nimport {selectLang} from \"../redux/selectors/selectorLang\";\nimport {language} from \"../languages/language\";\n\n\ntype TEditProfilePopupProps = {\n    onUpdateUser: (arg: IProfile) => void\n    onClose(event: SyntheticEvent): void\n}\n\ninterface IFormInputs {\n    userName: string\n    description: string\n}\n\nconst EditProfilePopup: FC<TEditProfilePopupProps> = (props) => {\n\n    const {selectedLang} = useSelector(selectLang)\n\n    const editProfilePopupSchema = yup.object().shape({\n        userName: yup.string()\n            .min(2, `${selectedLang === 'ru' ? 'минимум 2 символа' : ''}\n            ${selectedLang === 'fi' ? 'vähentään 2 merkkiä' : ''}`)\n            .required(`${selectedLang === 'ru' ? 'минимум 2 символа' : ''}\n            ${selectedLang === 'fi' ? 'Pakollinen kenttä' : ''}`),\n        description: yup.string()\n            .min(2, `${selectedLang === 'ru' ? 'минимум 2 символа' : ''}\n            ${selectedLang === 'fi' ? 'vähentään 2 merkkiä' : ''}`)\n            .required(`${selectedLang === 'ru' ? 'минимум 2 символа' : ''}\n            ${selectedLang === 'fi' ? 'Pakollinen kenttä' : ''}`),\n    });\n\n    const {register, formState: {errors}, handleSubmit, setValue} = useForm<IFormInputs>({\n        resolver: yupResolver(editProfilePopupSchema),\n        mode: \"onChange\",\n    });\n\n    const {user} = useSelector(selectCurrentUser)\n    const {isEditProfilePopupOpen} = useSelector(selectPopups)\n    const {loadingBtn} = useSelector(selectCardSettings)\n\n    useEffect(() => {\n        setValue(\"userName\", user.name)\n        setValue(\"description\", user.about)\n    }, [user, setValue, isEditProfilePopupOpen]);\n\n\n    const onSubmit = handleSubmit(data => {\n        props.onUpdateUser({\n            userName: data.userName,\n            description: data.description,\n        });\n    });\n\n    return (\n        <PopupWithForm isOpen={isEditProfilePopupOpen}\n                       params={{\n                           name: 'type_edit',\n                           title: `${language[selectedLang].editProfilePopup.title}`,\n                           buttonText: `${language[selectedLang].editProfilePopup.buttonText}`,\n                           buttonLoadingText: `${language[selectedLang].editProfilePopup.buttonLoadingText}`,\n                           formName: \"edit-profile\"\n                       }}\n                       onClose={props.onClose}\n                       loadingBtn={loadingBtn}\n                       isValid={true}\n                       onSubmit={onSubmit}>\n\n\n            <input className=\"form__input\" type='text' id=\"name\"\n                   {...register(\"userName\", {required: true})}\n                   placeholder={language[selectedLang].editProfilePopup.placeholderName}\n            />\n            <p className=\"form__input-error name-input-error\">{errors.userName?.message}</p>\n\n            <input type=\"text\" className=\"form__input\" id=\"description\"\n                   {...register(\"description\", {required: true})}\n                   placeholder={language[selectedLang].editProfilePopup.placeholderLink}\n            />\n            <p className=\"form__input-error job-input-error\">{errors.description?.message}</p>\n\n        </PopupWithForm>\n    )\n}\n\nexport default EditProfilePopup","import PopupWithForm from \"./PopupWithForm\";\nimport React, {FC, SyntheticEvent, useEffect} from \"react\";\nimport {useSelector} from \"react-redux\";\nimport {selectPopups} from \"../redux/selectors/selectPopups\";\nimport {selectCardSettings} from \"../redux/selectors/selectCardSettings\";\nimport {IAvatar} from \"../types/IAvatar\";\nimport {useForm} from \"react-hook-form\";\nimport {yupResolver} from \"@hookform/resolvers/yup\";\nimport * as yup from \"yup\";\nimport {selectLang} from \"../redux/selectors/selectorLang\";\nimport {language} from \"../languages/language\";\n\n\ntype TEditAvatarPopup = {\n    onClose(event: SyntheticEvent): void\n    onUpdateAvatar: (avatar: IAvatar) => void\n}\n\ninterface IFormInputs {\n    avatar: string\n}\n\nconst EditAvatarPopup: FC<TEditAvatarPopup> = (props) => {\n    const {selectedLang} = useSelector(selectLang)\n\n    const avatarPopupSchema = yup.object().shape({\n        avatar: yup.string()\n            .url(`${selectedLang === 'ru' ? 'введите корректный URL' : ''}\n            ${selectedLang === 'fi' ? 'Syötä kelvollinen URL' : ''}`)\n            .required(`${selectedLang === 'ru' ? 'введите URL' : ''}\n            ${selectedLang === 'fi' ? 'Pakollinen kenttä' : ''}`),\n    });\n\n    const {register, formState: {errors, isValid}, handleSubmit, reset} = useForm<IFormInputs>({\n        resolver: yupResolver(avatarPopupSchema),\n        mode: \"onChange\",\n    });\n\n    const {isEditAvatarPopupOpen} = useSelector(selectPopups)\n    const {loadingBtn} = useSelector(selectCardSettings)\n\n    useEffect(() => {\n        reset()\n    }, [reset, isEditAvatarPopupOpen]);\n\n    const onSubmit = handleSubmit(data => {\n        props.onUpdateAvatar({\n            avatar: data.avatar,\n        });\n    });\n\n    return (\n        <PopupWithForm isOpen={isEditAvatarPopupOpen}\n                       onClose={props.onClose}\n                       loadingBtn={loadingBtn}\n                       onSubmit={onSubmit}\n                       isValid={isValid}\n                       params={{\n                           name: 'type_avatar',\n                           title: `${language[selectedLang].editAvatarPopup.title}`,\n                           buttonText: `${language[selectedLang].editAvatarPopup.buttonText}`,\n                           buttonLoadingText: `${language[selectedLang].editAvatarPopup.buttonLoadingText}`,\n                           formName: \"change-avatar\"\n                       }}>\n\n            <input type=\"url\" className=\"form__input\" id=\"avatar\"\n                   {...register(\"avatar\", {required: true})}\n                   placeholder={language[selectedLang].editAvatarPopup.placeholderLink}/>\n            <p className=\"form__input-error avatar-input-error\">{errors.avatar?.message}</p>\n\n        </PopupWithForm>\n    )\n}\n\nexport default EditAvatarPopup","import PopupWithForm from \"./PopupWithForm\";\nimport React, {FC, useEffect} from \"react\";\nimport {useSelector} from \"react-redux\";\nimport {selectCardSettings} from \"../redux/selectors/selectCardSettings\";\nimport {selectPopups} from \"../redux/selectors/selectPopups\";\nimport {IPlace} from \"../types/IPlace\";\nimport {useForm} from \"react-hook-form\";\nimport {yupResolver} from \"@hookform/resolvers/yup\";\nimport * as yup from \"yup\";\nimport {selectLang} from \"../redux/selectors/selectorLang\";\nimport {language} from \"../languages/language\";\n\n\ntype TAddPlacePopup = {\n    onClose: () => void\n    onAddPlace: (arg: IPlace) => void\n}\n\ninterface IFormInputs {\n    title: string | number\n    link: string | number | symbol\n}\n\nconst AddPlacePopup: FC<TAddPlacePopup> = (props) => {\n    const {selectedLang} = useSelector(selectLang)\n\n  const addPlaceSchema = yup.object().shape({\n        title: yup.string()\n            .min(2, `${selectedLang === 'ru' ? 'минимум 2 символа' : ''}\n            ${selectedLang === 'fi' ? 'vähentään 2 merkkiä' : ''}`)\n            .required(`${selectedLang === 'ru' ? 'минимум 2 символа' : ''}\n            ${selectedLang === 'fi' ? 'Pakollinen kenttä' : ''}`),\n        link: yup.string()\n            .url(`${selectedLang === 'ru' ? 'введите корректный URL' : ''}\n            ${selectedLang === 'fi' ? 'Syötä kelvollinen URL' : ''}`)\n            .required(`${selectedLang === 'ru' ? 'введите URL' : ''}\n            ${selectedLang === 'fi' ? 'Pakollinen kenttä' : ''}`),\n    });\n\n    const {register, formState: {errors, isValid}, handleSubmit, reset} = useForm<IFormInputs>({\n        resolver: yupResolver(addPlaceSchema),\n        mode: \"onChange\",\n    });\n\n    const {loadingBtn} = useSelector(selectCardSettings)\n\n    const {isAddPlacePopupOpen} = useSelector(selectPopups)\n\n    useEffect(() => {\n        reset()\n\n    }, [reset, isAddPlacePopupOpen]);\n\n    const onSubmit = handleSubmit(data => {\n        props.onAddPlace({\n            title: data.title,\n            link: data.link,\n        });\n    });\n\n    return (\n        <PopupWithForm isOpen={isAddPlacePopupOpen}\n                       params={{\n                           name: 'new-card',\n                           title: `${language[selectedLang].addPlacePopup.title}`,\n                           buttonText: `${language[selectedLang].addPlacePopup.buttonText}`,\n                           buttonLoadingText: `${language[selectedLang].addPlacePopup.buttonLoadingText}`,\n                           formName: \"new-card\"\n                       }}\n\n                       onClose={props.onClose}\n                       onSubmit={onSubmit}\n                       isValid={isValid}\n                       loadingBtn={loadingBtn}\n                       >\n\n\n            <input type=\"text\"\n                   {...register(\"title\", {required: true})}\n                   className=\"form__input\" id=\"title\"\n                   placeholder={language[selectedLang].addPlacePopup.placeholderName}/>\n            <p className='title-input-error form__input-error'>{errors.title?.message}</p>\n\n            <input type=\"url\" className=\"form__input\"\n                   {...register(\"link\", {required: true})}\n                   name=\"link\" id=\"link\"\n                   placeholder={language[selectedLang].addPlacePopup.placeholderLink}/>\n            <p className='link-input-error form__input-error'>{errors.link?.message}</p>\n\n\n\n        </PopupWithForm>\n    )\n}\n\nexport default AddPlacePopup","import PopupWithForm from \"./PopupWithForm\";\nimport {useSelector} from \"react-redux\";\nimport {selectPopups} from \"../redux/selectors/selectPopups\";\nimport React, {FC, SyntheticEvent} from \"react\";\nimport {ICard} from \"../types/cardType\";\nimport {selectCardSettings} from \"../redux/selectors/selectCardSettings\";\n\ntype TPopupWithSubmitProps = {\n    onClose(event: SyntheticEvent): void\n    onSubmit(arg: ICard | null): void\n    cardToDelete: ICard | null\n}\n\n\nconst PopupWithSubmit: FC<TPopupWithSubmitProps> = ({onSubmit, onClose, cardToDelete}) => {\n\n    const {isPopupWithSubmitOpen} = useSelector(selectPopups)\n\n    const {loadingBtn} = useSelector(selectCardSettings)\n\n    function handleSubmit(e: SyntheticEvent) {\n        e.preventDefault()\n        onSubmit(cardToDelete)\n    }\n\n    return (\n        <PopupWithForm isOpen={isPopupWithSubmitOpen}\n                       params={{\n                           name: 'type_confirmation',\n                           title: 'Вы уверены?',\n                           buttonText: 'Да',\n                           buttonLoadingText: '...',\n                           formName: \"type_confirmation\"\n                       }}\n                       onClose={onClose}\n                       isValid={true}\n                       loadingBtn={loadingBtn}\n                       onSubmit={handleSubmit}>\n\n        </PopupWithForm>\n    )\n}\n\nexport default PopupWithSubmit","import {FC, useState} from \"react\";\nimport {useForm} from \"react-hook-form\";\nimport {yupResolver} from '@hookform/resolvers/yup';\nimport {useSelector} from \"react-redux\";\nimport {selectLang} from \"../redux/selectors/selectorLang\";\nimport {language} from \"../languages/language\";\nimport * as yup from \"yup\";\n\n\ntype TLogin = {\n    handleAuthorize(\n        email: string,\n        password: string\n    ): void\n}\n\ninterface IFormInputs {\n    Email: string | number\n    password: string | number\n}\n\nconst Login: FC<TLogin> = ({handleAuthorize}) => {\n\n    const {selectedLang} = useSelector(selectLang)\n\n    const schema = yup.object().shape({\n        Email: yup.string()\n            .email(`${selectedLang === 'ru' ? 'адрес электронной почты должен содержать символ @' : ''}\n            ${selectedLang === 'fi' ? 'Syötä kelvollinen sähköpostiosoite. Esim. erkki@tunnus.fi' : ''}`)\n            .required(`${selectedLang === 'ru' ? 'Введите адрес электронной почты' : ''}\n            ${selectedLang === 'fi' ? 'Pakollinen kenttä' : ''}`),\n        password: yup.string()\n            .min(8,`${selectedLang === 'ru' ? 'пароль должен содержать от 8 до 32 символов' : ''}\n            ${selectedLang === 'fi' ? 'vähentään 8 merkkiä' : ''}`)\n            .max(32,`${selectedLang === 'ru' ? 'пароль должен содержать от 8 до 32 символов' : ''}\n            ${selectedLang === 'fi' ? 'enintään 32 merkkiä' : ''}`)\n            .required(`${selectedLang === 'ru' ? 'Введите адрес электронной почты' : ''}\n            ${selectedLang === 'fi' ? 'Pakollinen kenttä' : ''}`)\n    });\n\n    const {register, formState: {errors}, handleSubmit} = useForm<IFormInputs>({\n        resolver: yupResolver(schema),\n        mode: \"onChange\",\n    });\n\n    const [email, setEmail] = useState<string>('');\n    const [password, setPassword] = useState<string>('');\n\n    function onSubmit() {\n        handleAuthorize(email, password)\n    }\n\n    return (\n        <form onSubmit={handleSubmit(onSubmit)} className='log__in_wrapper' noValidate>\n            <h4 className='log__in_title'>{language[selectedLang].login.title}</h4>\n            <input type=\"email\" className=\"log__in_input\"\n                   placeholder='Email'\n                   {...register(\"Email\", {required: true})}\n                   onChange={(e) => setEmail(e.target.value)}\n                   value={email || ''}\n            />\n            <p className='log__in_error'>{errors.Email?.message}</p>\n            <input type=\"password\" className=\"log__in_input\"\n                   placeholder={language[selectedLang].login.placeholder}\n                   value={password || ''}\n                   {...register(\"password\", {required: true})}\n                   onChange={(e) => setPassword(e.target.value)}\n            />\n            <p className='log__in_error'>{errors.password?.message}</p>\n            <button type='submit' className='log__in_button'>{language[selectedLang].login.buttonText}</button>\n        </form>\n    )\n}\n\nexport default Login","import {FC, useState} from \"react\";\nimport {Link} from \"react-router-dom\";\nimport {useForm} from \"react-hook-form\";\nimport {yupResolver} from '@hookform/resolvers/yup';\nimport {language} from \"../languages/language\";\nimport {useSelector} from \"react-redux\";\nimport {selectLang} from \"../redux/selectors/selectorLang\";\nimport * as yup from \"yup\";\n\n\n\ntype TRegister = {\n    handleRegister(\n        email: string,\n        password: string\n    ): void\n}\n\ninterface IFormInputs {\n    Email: string | number\n    password: string | number\n}\n\nconst Register: FC<TRegister> = ({handleRegister}) => {\n\n    const {selectedLang} = useSelector(selectLang)\n\n    const schema = yup.object().shape({\n        Email: yup.string()\n            .email(`${selectedLang === 'ru' ? 'адрес электронной почты должен содержать символ @' : ''}\n            ${selectedLang === 'fi' ? 'Syötä kelvollinen sähköpostiosoite. Esim. erkki@tunnus.fi' : ''}`)\n            .required(`${selectedLang === 'ru' ? 'Введите адрес электронной почты' : ''}\n            ${selectedLang === 'fi' ? 'Pakollinen kenttä' : ''}`),\n        password: yup.string()\n            .min(8,`${selectedLang === 'ru' ? 'пароль должен содержать от 8 до 32 символов' : ''}\n            ${selectedLang === 'fi' ? 'vähentään 8 merkkiä' : ''}`)\n            .max(32,`${selectedLang === 'ru' ? 'пароль должен содержать от 8 до 32 символов' : ''}\n            ${selectedLang === 'fi' ? 'enintään 32 merkkiä' : ''}`)\n            .required(`${selectedLang === 'ru' ? 'Введите адрес электронной почты' : ''}\n            ${selectedLang === 'fi' ? 'Pakollinen kenttä' : ''}`)\n    });\n\n    const {register, formState: {errors}, handleSubmit} = useForm<IFormInputs>({\n        resolver: yupResolver(schema),\n        mode: \"onBlur\",\n    });\n\n    const [email, setEmail] = useState<string>('');\n    const [password, setPassword] = useState<string>('');\n    function onSubmit() {\n        handleRegister(email, password)\n    }\n\n    return (\n        <form onSubmit={handleSubmit(onSubmit)} className='log__in_wrapper' noValidate>\n            <h4 className='log__in_title'>{language[selectedLang].register.title}</h4>\n            <input type=\"email\" className=\"log__in_input\"\n                   placeholder='Email'\n                   value={email || ''}\n                   {...register(\"Email\", {required: true})}\n                   onChange={(e) => setEmail(e.target.value)}\n            />\n            <p className='log__in_error'>{errors.Email?.message}</p>\n            <input type=\"password\" className=\"log__in_input\" placeholder={language[selectedLang].register.placeholder}\n                   value={password || ''}\n                   {...register(\"password\", {required: true})}\n                   onChange={(e) => setPassword(e.target.value)}\n            />\n            <p className='log__in_error'>{errors.password?.message}</p>\n            <button type='submit' className='log__in_button'>{language[selectedLang].register.buttonText}</button>\n            <p className='login__form_button-text'>{language[selectedLang].register.text}\n                <Link to='/sign-in'>\n                    <button className='login__form_button'> {language[selectedLang].register.textBtn}</button>\n                </Link>\n            </p>\n        </form>\n    )\n}\n\nexport default Register","export const BASE_URL = 'https://auth.nomoreparties.co';\n\nexport const register = (email: string, password: string) => {\n\n    return fetch(`${BASE_URL}/signup`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            password: password,\n            email: email\n        })\n    })\n        .then((response) => handleResponse(response)).then(data => data);\n};\nexport const authorize = (email: string, password: string) => {\n    return fetch(`${BASE_URL}/signin`, {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            password: password,\n            email: email\n        })\n    })\n        .then((response) => handleResponse(response))\n        .then((data) => {\n            if (data.token) {\n                localStorage.setItem('jwt', data.token);\n\n                return data;\n            }\n        })\n};\nexport const checkToken = (token: string | null) => {\n    return fetch(`${BASE_URL}/users/me`, {\n        method: 'GET',\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${token}`,\n        }\n    })\n        .then((response) => handleResponse(response)).then(data => data);\n}\n\nfunction handleResponse(res: Response) {\n    if (res.ok) {\n        return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status}`);\n};\n","import {FC, SyntheticEvent} from \"react\";\n\ntype TSuccessOrFailPopup = {\n    onClose(event: SyntheticEvent): void\n    isOpen: boolean\n    text: string\n    className: string\n}\n\nconst SuccessOrFailPopup: FC<TSuccessOrFailPopup> = (props) => {\n\n    return (\n        <div className={`popup  ${props.isOpen && 'popup_opened'}`}>\n            <div className=\"popup__container\">\n                <button onClick={props.onClose} type=\"button\" className=\"popup__button-close\"/>\n\n                <div className='success__popup_wrapper'>\n                    <div className={props.className}/>\n                    <h2 className=\"success__popup_text\">{props.text}</h2>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default SuccessOrFailPopup","import SuccessOrFailPopup from \"./SuccessOrFailPopup\";\nimport {FC, SyntheticEvent} from \"react\";\n\ntype TSuccessPopupProps = {\n    onClose(event: SyntheticEvent): void\n    isOpen: boolean\n}\n\nconst SuccessPopup: FC<TSuccessPopupProps> = ({onClose, isOpen}) => {\n\n    const text = 'Вы успешно зарегистрировались!'\n    const className = 'success__popup_img'\n\n    return (\n        <SuccessOrFailPopup onClose={onClose} isOpen={isOpen} text={text} className={className}/>\n    )\n}\n\nexport default SuccessPopup","import SuccessOrFailPopup from \"./SuccessOrFailPopup\";\nimport {FC, SyntheticEvent} from \"react\";\n\ntype TFailPopupProps = {\n    isOpen: boolean\n    onClose(event: SyntheticEvent): void\n}\n\nconst FailPopup: FC<TFailPopupProps> = ({onClose, isOpen}) => {\n    const text = 'Что-то пошло не так! Попробуйте ещё раз'\n    const className = 'fail__popup_img'\n\n    return (\n        <SuccessOrFailPopup onClose={onClose} isOpen={isOpen} text={text} className={className}/>\n    )\n}\n\nexport default FailPopup","\n\nconst SET_LANG = 'SET_LANG'\n\ntype ILang = {\n    selectedLang: string\n}\n\ntype TSetLang = {\n    type: typeof SET_LANG\n    payload: string,\n}\n\nconst initialState: ILang = {\n    selectedLang: 'ru'\n}\n\nexport const langReducer = (state = initialState, action: TSetLang) => {\n\n    switch (action.type) {\n        case SET_LANG:\n            return {\n                ...state,\n                selectedLang: action.payload\n            }\n        default:\n            return state\n    }\n}\n\n\nexport const setLang = (value: string): TSetLang => ({\n    type: SET_LANG,\n    payload: value,\n})","import {Link, Route, Switch} from \"react-router-dom\";\nimport {FC} from \"react\";\nimport React from 'react';\nimport {language} from \"../languages/language\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {selectLang} from \"../redux/selectors/selectorLang\";\nimport {setLang} from \"../redux/reducers/language\";\n\n\ntype THeaderProps = {\n    currentEmail: string\n    signOut: () => void\n}\n\n\nconst Header: FC<THeaderProps> = ({signOut, currentEmail}) => {\n\n    const dispatch = useDispatch()\n\n    const {selectedLang} = useSelector(selectLang)\n\n    function langHandler(value: string): void {\n        dispatch(setLang(value))\n    }\n\n    return (\n        <header className=\"header\">\n            <a href=\"#\" target=\"_blank\" className=\"logo\"/>\n            <div className=\"select__btn-wrapper\">\n                <button className={`select__btn-ru ${selectedLang === 'ru' && 'select__btn-active'}`}\n                        onClick={() =>{langHandler('ru')}\n\n                        }>ru</button>\n                <button className={`select__btn-fi ${selectedLang === 'fi' && 'select__btn-active'}`}\n                        onClick={() => langHandler('fi')}>fi</button>\n            </div>\n            <div className='header__wrapper'>\n                {currentEmail && <p className='header__wrapper_email'>{currentEmail}</p>}\n                <Switch>\n                    <Route exact path='/'>\n                        <button onClick={signOut}\n                                className='header__wrapper_button'>\n                            {language[selectedLang].header.singOut}\n                        </button>\n                    </Route>\n                    <Route exact path='/sign-up'>\n                        <Link to='/sign-in'>\n                            <button className='header__wrapper_button'>\n                                {language[selectedLang].header.singIn}\n                            </button>\n                        </Link>\n                    </Route>\n                    <Route exact path='/sign-in'>\n                        <Link to='/sign-up'>\n                            <button className='header__wrapper_button'>\n                                {language[selectedLang].header.singUp}\n                            </button>\n                        </Link>\n                    </Route>\n                </Switch>\n            </div>\n        </header>\n    )\n}\n\nexport default Header\n\n","import {SET_FAIL_POPUP_OPEN} from \"../../constants/constants\";\n\n\nexport interface ISetFailPopupOpen {\n    type: typeof SET_FAIL_POPUP_OPEN,\n    payload: boolean\n}\n\nexport const setFailPopupOpen = (value: boolean): ISetFailPopupOpen => ({\n    type: SET_FAIL_POPUP_OPEN,\n    payload: value,\n});\n\n","import {SET_POPUP_WITH_SUBMIT_OPEN} from \"../../constants/constants\";\n\n\nexport interface ISetPopupWithSubmitOpen {\n    type: typeof SET_POPUP_WITH_SUBMIT_OPEN,\n    payload: boolean\n}\n\nexport const setPopupWithSubmitOpen = (value: boolean): ISetPopupWithSubmitOpen => ({\n    type: SET_POPUP_WITH_SUBMIT_OPEN,\n    payload: value,\n});","import {SET_USER} from \"../../constants/constants\";\nimport {IUser} from \"../../../types/currentUserAndEmailTypes\";\n\n\nexport interface ISetCurrentUser {\n    type: typeof SET_USER,\n    payload: IUser\n}\n\nexport const setCurrentUser = (value: IUser): ISetCurrentUser => ({\n    type: SET_USER,\n    payload: value,\n});","import {SET_CURRENT_EMAIL} from \"../../constants/constants\";\n\n\nexport interface ISetCurrentEmail {\n    type: typeof SET_CURRENT_EMAIL,\n    payload: string\n}\n\nexport const setCurrentEmail = (value: string): ISetCurrentEmail => ({\n    type: SET_CURRENT_EMAIL,\n    payload: value,\n});","import {SET_LOGGED_IN} from \"../../constants/constants\";\n\n\nexport interface ISetLoggedIn {\n    type: typeof SET_LOGGED_IN,\n    payload: boolean\n}\n\nexport const setLoggedIn = (value: boolean): ISetLoggedIn => ({\n    type: SET_LOGGED_IN,\n    payload: value,\n});","import {SET_LOADING_BTN} from \"../../constants/constants\";\n\n\nexport interface ISetLoadingBtn {\n    type: typeof SET_LOADING_BTN,\n    payload: boolean\n}\n\nexport const setLoadingBtn = (value: boolean): ISetLoadingBtn => ({\n    type: SET_LOADING_BTN,\n    payload: value,\n});","\nimport { SET_LOADING} from \"../../constants/constants\";\n\n\nexport interface ISetIsLoading {\n    type: typeof SET_LOADING,\n    payload: boolean\n}\n\nexport const setIsLoading = (cards: boolean): ISetIsLoading => ({\n    type: SET_LOADING,\n    payload: cards,\n});","import {IProfile} from \"../types/currentUserAndEmailTypes\";\nimport {IPlace} from \"../types/IPlace\";\nimport {IAvatar} from \"../types/IAvatar\";\n\ninterface IApiTS{\n    baseUrl: string\n    headers: {\n        authorization: string\n        'Content-Type': string\n    }\n}\n\n\nclass ApiTS {\n\n    URL: string\n    token: string\n\n    constructor({baseUrl, headers}: IApiTS) {\n        this.URL = baseUrl;\n        this.token = headers.authorization;\n    };\n\n    getInitialCards() {\n        return fetch(`${this.URL}cards`, {\n            headers: {\n                authorization: this.token,\n            }\n        })\n            .then(this._handleResponse);\n    };\n\n    getUserInfoFromServer() {\n        return fetch(`${this.URL}users/me`, {\n            headers: {\n                authorization: this.token,\n            }\n        })\n            .then(this._handleResponse);\n    };\n\n    setUserInfoFromServer({userName, description}: IProfile) {\n        return fetch(`${this.URL}users/me`, {\n            method: 'PATCH',\n            headers: {\n                authorization: this.token,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                name: userName,\n                about: description\n            })\n        })\n            .then(this._handleResponse);\n    };\n\n    addCardToServer({title, link}: IPlace) {\n        return fetch(`${this.URL}cards`, {\n            method: 'POST',\n            headers: {\n                authorization: this.token,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                name: title,\n                link: link\n            })\n        })\n            .then(this._handleResponse);\n    };\n\n    deleteCardFromServer(data: string) {\n        return fetch(`${this.URL}cards/${data}`, {\n            method: 'DELETE',\n            headers: {\n                authorization: this.token,\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(this._handleResponse);\n    };\n\n    changeLikeCardStatus(id: string, isLiked: boolean) {\n        let method\n        if (!isLiked) {\n            method = 'DELETE'\n        } else {\n            method = 'PUT'\n        }\n        return fetch(`${this.URL}cards/likes/${id}`, {\n            method: method,\n            headers: {\n                authorization: this.token,\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(this._handleResponse);\n    };\n\n    changeAvatar(item: IAvatar) {\n        return fetch(`${this.URL}users/me/avatar`, {\n            method: 'PATCH',\n            headers: {\n                authorization: this.token,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                avatar: item.avatar,\n            })\n        })\n            .then(this._handleResponse);\n    };\n\n    _handleResponse(res: Response) {\n        if (res.ok) {\n            return res.json();\n        }\n        return Promise.reject(`Ошибка: ${res.status}`);\n    };\n\n};\n\nconst apiTS = new ApiTS({\n    baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-26/',\n    headers: {\n        authorization: '4e299d77-1777-4738-8eea-94761855c603',\n        'Content-Type': 'application/json'\n    }\n});\n\nexport default apiTS;\n\n","import Main from \"./Main\";\nimport Footer from \"./Footer\";\nimport React, {FC, useEffect} from \"react\";\nimport ImagePopup from \"./ImagePopup\";\nimport EditProfilePopup from \"./EditProfilePopup\";\nimport EditAvatarPopup from \"./EditAvatarPopup\";\nimport AddPlacePopup from \"./AddPlacePopup\";\nimport PopupWithSubmit from \"./PopupWithSubmit\";\nimport {Route, Switch, Redirect, useHistory} from 'react-router-dom';\nimport Login from \"./Login\";\nimport Register from \"./Register\";\nimport * as auth from \"../utils/authTS\";\nimport SuccessPopup from \"./SuccessPopup\";\nimport FailPopup from \"./FailPopup\";\nimport Header from \"./Header\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {closeAllPopupsState} from \"../redux/actions/popupsActions/closeAllPopupsState\";\nimport {setFailPopupOpen} from \"../redux/actions/popupsActions/setFailPopupOpen\";\nimport {setPopupWithSubmitOpen} from \"../redux/actions/popupsActions/setPopupWithSubmitOpen\";\nimport {setSuccessPopupOpen} from \"../redux/actions/popupsActions/setSuccessPopupOpen\";\nimport {setCurrentUser} from \"../redux/actions/currentUserAndEmail/setCurrentUser\";\nimport {setCurrentEmail} from \"../redux/actions/currentUserAndEmail/setCurrentEmail\";\nimport {setLoggedIn} from \"../redux/actions/cartdSettingActions/setLoggedIn\";\nimport {setCardToDelete} from \"../redux/actions/cartdSettingActions/setCardToDelete\";\nimport {setLoadingBtn} from \"../redux/actions/cartdSettingActions/setLoadingBtn\";\nimport {setSelectedCard} from \"../redux/actions/cartdSettingActions/setSelectedCard\";\nimport {setIsLoading} from \"../redux/actions/initialCardsActions/setIsLoading\";\nimport {setInitialCards} from \"../redux/actions/initialCardsActions/setInitialCards\";\nimport {likeCard} from \"../redux/actions/initialCardsActions/likeCard\";\nimport {deleteCard} from \"../redux/actions/initialCardsActions/deleteCard\";\nimport {addCard} from \"../redux/actions/initialCardsActions/addCard\";\nimport {selectInitialCards} from \"../redux/selectors/selectInitialCards\";\nimport {selectCurrentUser} from \"../redux/selectors/selectCurrentUser\";\nimport {selectCardSettings} from \"../redux/selectors/selectCardSettings\";\nimport {selectPopups} from \"../redux/selectors/selectPopups\";\nimport {ICard} from \"../types/cardType\";\nimport {IProfile} from \"../types/currentUserAndEmailTypes\";\nimport {IAvatar} from \"../types/IAvatar\";\nimport {IPlace} from \"../types/IPlace\";\nimport apiTS from \"../utils/apiTS\";\n\n\n\nconst App: FC = () => {\n\n    const dispatch = useDispatch()\n\n    const {cards} = useSelector(selectInitialCards)\n    const {user, currentEmail} = useSelector(selectCurrentUser)\n    const {selectedCard, cardToDelete, loggedIn} = useSelector(selectCardSettings)\n    const {successPopupOpen, failPopupOpen} = useSelector(selectPopups)\n    const history = useHistory()\n\n    useEffect(() => {\n        dispatch(setIsLoading(true))\n        let getInitialCard = apiTS.getInitialCards()\n        let getUserInfoFromServer = apiTS.getUserInfoFromServer()\n\n        Promise.all([getInitialCard, getUserInfoFromServer])\n            .then(([cardData, userData]) => {\n                dispatch(setInitialCards(cardData))\n                dispatch(setCurrentUser(userData))\n            }).catch((error) => {\n            console.log(error)\n        }).finally(() => {\n            dispatch(setIsLoading(false))\n        })\n\n    }, [dispatch]);\n\n    function handleCardLike(card: ICard): void {\n        const isLiked = card.likes.some(i => i._id === user._id);\n        apiTS.changeLikeCardStatus(card._id, !isLiked).then((newCard) => {\n            let likedCards = cards.map((c) => c._id === card._id ? newCard : c)\n            dispatch(likeCard(likedCards))\n        }).catch((err) => {\n            console.log(err);\n        })\n    }\n\n    useEffect(() => {\n        if (localStorage.getItem('jwt')) {\n            const jwt = localStorage.getItem('jwt');\n            auth.checkToken(jwt).then((res) => {\n                if (res) {\n                    dispatch(setCurrentEmail(res.data.email))\n                    dispatch(setLoggedIn(true))\n                    history.push(\"/\");\n                }\n            });\n        }\n    }, [history, dispatch]);\n\n    function handleCardDelete(card: ICard): void {\n        dispatch(setPopupWithSubmitOpen(true))\n        dispatch(setCardToDelete(card))\n    }\n\n    function handleCardDeleteSubmit(card: ICard): void {\n        dispatch(setLoadingBtn(true))\n        apiTS.deleteCardFromServer(card._id).then((data) => {\n            if (data.message === \"Пост удалён\") {\n                let filteredCards = cards.filter(item => item !== card);\n                dispatch(deleteCard(filteredCards))\n                dispatch(setPopupWithSubmitOpen(false))\n            }\n        }).catch((err) => {\n            console.log(err);\n        }).finally(() => {\n            dispatch(setLoadingBtn(false))\n        })\n    }\n\n    function closeAllPopups(): void {\n        dispatch(closeAllPopupsState(false))\n        dispatch(setSelectedCard(null))\n    }\n\n    function handleUpdateUser(value: IProfile): void {\n        dispatch(setLoadingBtn(true))\n        apiTS.setUserInfoFromServer(value).then(data => {\n            dispatch(setCurrentUser(data))\n            closeAllPopups();\n        }).catch((err) => {\n            console.log(err);\n        }).finally(() => {\n            dispatch(setLoadingBtn(false))\n        })\n    }\n\n    function handleUpdateAvatar(link: IAvatar): void {\n        dispatch(setLoadingBtn(true))\n        apiTS.changeAvatar(link).then(data => {\n            dispatch(setCurrentUser(data))\n            closeAllPopups();\n        }).catch((err) => {\n            console.log(err);\n        }).finally(() => {\n            dispatch(setLoadingBtn(false))\n        })\n    }\n\n    function handleAddPlaceSubmit(value: IPlace): void {\n        dispatch(setLoadingBtn(true))\n        apiTS.addCardToServer(value).then(data => {\n            dispatch(addCard(data))\n            closeAllPopups();\n        }).catch((err) => {\n            console.log(err);\n        }).finally(() => {\n            dispatch(setLoadingBtn(false))\n        })\n    }\n\n    function handleAuthorize(email: string, password: string): void {\n        auth.authorize(email, password).then((data) => {\n            if (data.token) {\n                dispatch(setLoggedIn(true))\n                dispatch(setCurrentEmail(email))\n                history.push('/')\n            }\n        }).catch((err) => {\n            dispatch(setFailPopupOpen(true))\n            console.log(err)\n        });\n    }\n\n    function handleRegister(email: string, password: string): void {\n        auth.register(email, password).then((response) => {\n            dispatch(setSuccessPopupOpen(true))\n            history.push('/sign-in')\n        }).catch((err) => {\n            console.log(err)\n            dispatch(setFailPopupOpen(true))\n        })\n    }\n\n    function signOut() {\n        localStorage.removeItem('jwt');\n        history.push('/sign-in');\n        dispatch(setLoggedIn(false))\n        dispatch(setCurrentEmail(''))\n    }\n\n    return (\n            <div className=\"App\">\n                <div className=\"page\">\n                    <div className=\"page__wrapper\">\n                        <SuccessPopup onClose={closeAllPopups}\n                                      isOpen={successPopupOpen}/>\n                        <FailPopup onClose={closeAllPopups} isOpen={failPopupOpen}/>\n                        <ImagePopup card={selectedCard} onClose={closeAllPopups}/>\n                        <EditProfilePopup onUpdateUser={handleUpdateUser}\n                                          onClose={closeAllPopups}/>\n                        <EditAvatarPopup onUpdateAvatar={handleUpdateAvatar}\n                                         onClose={closeAllPopups}/>\n\n                        <AddPlacePopup onClose={closeAllPopups} onAddPlace={handleAddPlaceSubmit}/>\n                        <PopupWithSubmit onClose={closeAllPopups}\n                                         onSubmit={handleCardDeleteSubmit}\n                                         cardToDelete={cardToDelete}/>\n                        <Header currentEmail={currentEmail} signOut={signOut}/>\n                        <Switch>\n                            <Route exact path=\"/\">\n                                {loggedIn ? <Main onCardLike={handleCardLike}\n                                                  onCardDelete={handleCardDelete}/> :\n                                    <Redirect to=\"/sign-in\"/>}\n                            </Route>\n                            <Route path=\"/sign-in\">\n                                <Login handleAuthorize={handleAuthorize}/>\n                            </Route>\n                            <Route path=\"/sign-up\">\n                                <Register handleRegister={handleRegister}/>\n                            </Route>\n                            <Route path=\"/\">\n                                {loggedIn ? <Redirect to=\"/\"/> : <Redirect to=\"/sign-in\"/>}\n                            </Route>\n                        </Switch>\n                        <Footer/>\n                    </div>\n                </div>\n            </div>\n    );\n}\n\nexport default App;\n","import {CLOSE_ALL_POPUPS} from \"../../constants/constants\";\n\n\nexport interface ICloseAllPopupsState {\n    type: typeof CLOSE_ALL_POPUPS,\n    payload: boolean\n}\n\nexport const closeAllPopupsState = (value: boolean): ICloseAllPopupsState => ({\n    type: CLOSE_ALL_POPUPS,\n    payload: value,\n});\n\n","import {SET_CARDS} from \"../../constants/constants\";\nimport {ICard} from \"../../../types/cardType\";\n\n\nexport interface TSetInitialCards {\n    type: typeof SET_CARDS,\n    payload: ICard[]\n}\n\n\nexport const setInitialCards = (cards: ICard[]): TSetInitialCards => ({\n    type: SET_CARDS,\n    payload: cards,\n});","import {ADD_CARD} from \"../../constants/constants\";\nimport {ICard} from \"../../../types/cardType\";\n\n\nexport interface TAddCard {\n    type: typeof ADD_CARD,\n    payload: ICard\n}\n\nexport const addCard = (card: ICard): TAddCard => ({\n    type: ADD_CARD,\n    payload: card,\n});","\nimport {DELETE_CARD} from \"../../constants/constants\";\nimport {ICard} from \"../../../types/cardType\";\n\n\n\nexport interface TDeleteCard {\n    type: typeof DELETE_CARD,\n    payload: ICard[]\n}\n\n\nexport const deleteCard = (cards: ICard[]): TDeleteCard => ({\n    type: DELETE_CARD,\n    payload: cards,\n});","import {LIKE_CARD} from \"../../constants/constants\";\nimport {ICard} from \"../../../types/cardType\";\n\n\nexport interface ILikeCard {\n    type: typeof LIKE_CARD,\n    payload: ICard[]\n}\n\n\nexport const likeCard = (cards: ICard[]): ILikeCard => ({\n    type: LIKE_CARD,\n    payload: cards,\n});","import {SET_CARD_TO_DELETE,} from \"../../constants/constants\";\nimport {ICard} from \"../../../types/cardType\";\n\n\nexport interface ISetCardToDelete {\n    type: typeof SET_CARD_TO_DELETE,\n    payload: ICard\n}\n\nexport const setCardToDelete = (value: ICard): ISetCardToDelete => ({\n    type: SET_CARD_TO_DELETE,\n    payload: value,\n});","import {SET_SUCCESS_POPUP_OPEN} from \"../../constants/constants\";\n\n\nexport interface ISetSuccessPopupOpen {\n    type: typeof SET_SUCCESS_POPUP_OPEN,\n    payload: boolean\n}\n\nexport const setSuccessPopupOpen = (value: boolean): ISetSuccessPopupOpen => ({\n    type: SET_SUCCESS_POPUP_OPEN,\n    payload: value,\n});","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {ADD_CARD, DELETE_CARD, LIKE_CARD, SET_CARDS, SET_LOADING} from \"../constants/constants\";\nimport {TAction} from \"../actions\";\nimport {IInitialCards} from \"../../types/cardType\";\n\n\nconst initialState: IInitialCards = {\n    cards: [],\n    isLoading: false\n}\n\n\nconst initialCards = (state = initialState, action: TAction): IInitialCards => {\n    switch (action.type) {\n        case SET_CARDS:\n            return {\n                ...state,\n                cards: action.payload\n            };\n        case ADD_CARD:\n            return {\n                ...state,\n                cards: [action.payload, ...state.cards]\n            };\n        case DELETE_CARD:\n            return {\n                ...state,\n                cards: action.payload\n            };\n        case LIKE_CARD:\n            return {\n                ...state,\n                cards: action.payload\n            };\n        case SET_LOADING:\n            return {\n                ...state,\n                isLoading: action.payload\n            }\n        default:\n            return state;\n    }\n}\n\nexport default initialCards;","import {SET_CURRENT_EMAIL, SET_USER} from \"../constants/constants\";\nimport {TAction} from \"../actions\";\nimport {TCurrentUserAndEmail} from \"../../types/currentUserAndEmailTypes\";\n\nconst initialState: TCurrentUserAndEmail = {\n    user: {\n        about: '',\n        avatar: '',\n        cohort: '',\n        name: '',\n        _id: '',\n    },\n    currentEmail: '',\n}\n\nconst currentUser = (state = initialState, action: TAction): TCurrentUserAndEmail => {\n    switch (action.type) {\n        case SET_USER:\n            return {\n                ...state,\n                user: action.payload\n            }\n        case SET_CURRENT_EMAIL:\n            return {\n                ...state,\n                currentEmail: action.payload\n            }\n\n        default:\n            return state\n    }\n\n}\n\nexport default currentUser","import {\n    CLOSE_ALL_POPUPS,\n    SET_ADD_PLACE_POPUP_OPEN,\n    SET_EDIT_AVATAR_POPUP_OPEN,\n    SET_EDIT_PROFILE_POPUP_OPEN, SET_FAIL_POPUP_OPEN, SET_POPUP_WITH_SUBMIT_OPEN, SET_SUCCESS_POPUP_OPEN\n} from \"../constants/constants\";\nimport {TPopups} from \"../../types/popupsTypes\";\nimport {TAction} from \"../actions\";\n\n\nconst initialState: TPopups = {\n    isEditProfilePopupOpen: false,\n    isAddPlacePopupOpen: false,\n    isEditAvatarPopupOpen: false,\n    isPopupWithSubmitOpen: false,\n    successPopupOpen: false,\n    failPopupOpen: false\n}\n\nconst popups = (state = initialState, action: TAction) => {\n    switch (action.type) {\n        case SET_EDIT_PROFILE_POPUP_OPEN:\n            return {\n                ...state,\n                isEditProfilePopupOpen: action.payload\n            };\n        case SET_ADD_PLACE_POPUP_OPEN:\n            return {\n                ...state,\n                isAddPlacePopupOpen: action.payload\n            };\n        case SET_EDIT_AVATAR_POPUP_OPEN:\n            return {\n                ...state,\n                isEditAvatarPopupOpen: action.payload\n            };\n        case SET_POPUP_WITH_SUBMIT_OPEN:\n            return {\n                ...state,\n                isPopupWithSubmitOpen: action.payload\n            };\n        case SET_SUCCESS_POPUP_OPEN:\n            return {\n                ...state,\n                successPopupOpen: action.payload\n            };\n        case SET_FAIL_POPUP_OPEN:\n            return {\n                ...state,\n                failPopupOpen: action.payload\n            };\n        case CLOSE_ALL_POPUPS:\n            return {\n                ...state,\n                isPopupWithSubmitOpen: action.payload,\n                isEditAvatarPopupOpen: action.payload,\n                isAddPlacePopupOpen: action.payload,\n                isEditProfilePopupOpen: action.payload,\n                successPopupOpen: action.payload,\n                failPopupOpen: action.payload\n            };\n        default:\n            return state\n\n    }\n}\n\nexport default popups","import {SET_CARD_TO_DELETE, SET_LOADING_BTN, SET_LOGGED_IN, SET_SELECTED_CARD} from \"../constants/constants\";\nimport {TAction} from \"../actions\";\nimport {TCardSettings} from \"../../types/cardSettingsTypes\";\n\n\nconst initialState: TCardSettings = {\n    selectedCard: null,\n    cardToDelete: null,\n    loadingBtn: false,\n    loggedIn: false,\n}\n\nconst cardSettings = (state = initialState, action: TAction) => {\n    switch (action.type) {\n        case SET_SELECTED_CARD:\n            return {\n                ...state,\n                selectedCard: action.payload\n            }\n        case SET_CARD_TO_DELETE:\n            return {\n                ...state,\n                cardToDelete: action.payload\n            }\n        case SET_LOADING_BTN:\n            return {\n                ...state,\n                loadingBtn: action.payload\n            }\n        case SET_LOGGED_IN:\n            return {\n                ...state,\n                loggedIn: action.payload\n            }\n        default:\n            return state\n    }\n}\n\nexport default cardSettings","import {combineReducers} from 'redux'\nimport initialCards from \"./initialCard\";\nimport currentUser from \"./currentUser\";\nimport popups from \"./popups\";\nimport cardSettings from \"./cardSettings\";\nimport {langReducer} from \"./language\";\n\nexport type RootReducerType = typeof rootReducer\n\nconst rootReducer = combineReducers({\n    initialCards: initialCards,\n    currentUser: currentUser,\n    popups: popups,\n    cardSettings: cardSettings,\n    langReducer:langReducer\n\n});\n\nexport default rootReducer;","import { createStore, compose, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer, {RootReducerType} from './reducers';\n\ndeclare global {\n    interface Window {\n        __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n    }\n}\n\nexport type AppStateType = ReturnType<RootReducerType>\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\";\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\n            <Provider store={store}>\n                <BrowserRouter>\n                    <App/>\n                </BrowserRouter>\n            </Provider>\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n\nreportWebVitals();\n"],"sourceRoot":""}